def projectDir = new File('.').absolutePath

nextflow_pipeline {

    name "Test pipeline"
    script "../main.nf"
    tag "pipeline"
    tag "pipeline_sarek"

    def test_scenario = [
        [
            name: "-profile test --input tests/csv/3.0/fastq_umi.csv --umi_read_structure '+T 7M1S+T' --tools null",
            params: [
                input: "${projectDir}/tests/csv/3.0/fastq_umi.csv",
                tools: null,
                umi_read_structure: '+T 7M1S+T'
            ]
        ]
    ]

    // Generate tests for each scenario
    test_scenario.each { scenario ->
        test(scenario.name, UTILS.get_test(scenario))
    }

    test("-profile test --input tests/csv/3.0/fastq_umi.csv --umi_read_structure '+T 7M1S+T' --tools null --aligner sentieon-bwamem") {
        tag "cpu"

        when {
            params {
                input = "${projectDir}/tests/csv/3.0/fastq_umi.csv"
                outdir = "$outputDir"
                tools = null
                umi_read_structure = '+T 7M1S+T'
                aligner = 'sentieon-bwamem'
            }
        }

        then {
            assert workflow.failed
            assertAll(
                { assert workflow.stdout.toString().contains("sentieon-bwamem is currently not compatible with FGBio UMI handeling. Please choose a different aligner.") }
            )
        }
    }

    test("-profile test --input tests/csv/3.0/fastq_umi.csv --umi_read_structure '+T 7M1S+T' --tools null --aligner parabricks") {
        tag "cpu"

        when {
            params {
                input = "${projectDir}/tests/csv/3.0/fastq_umi.csv"
                outdir = "$outputDir"
                tools = null
                umi_read_structure = '+T 7M1S+T'
                aligner = 'parabricks'
            }
        }

        then {
            assert workflow.failed
            assertAll(
                { assert workflow.stdout.toString().contains("parabricks is currently not compatible with FGBio UMI handeling. Please choose a different aligner.") }
            )
        }
    }
}
