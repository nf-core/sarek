def projectDir = new File('.').absolutePath

nextflow_pipeline {

    name "Test pipeline"
    script "../main.nf"
    tag "pipeline"
    tag "pipeline_sarek"

    def test_scenario = [
        [
            name: "-profile test --tools vep --download_cache --vep_include_fasta",
            params: [
                input: "${projectDir}/tests/csv/3.0/vcf_single.csv",
                step: 'annotate',
                download_cache: true,
                tools: 'vep'
            ]
        ]
    ]

    // Generate tests for each scenario
    test_scenario.each { scenario ->
        test(scenario.name, UTILS.get_test(scenario))
    }

    test("Fails with profile test --tools vep --vep_cache_version 1 --build_only_index") {
        tag "cpu"
        tag "no_stub"

        when {
            params {
                outdir = "$outputDir"
                input = "${projectDir}/tests/csv/3.0/vcf_single.csv"
                step = 'annotate'
                vep_cache = 's3://annotation-cache/vep_cache/'
                vep_cache_version = 1
                input = false
                build_only_index = true
                tools = 'vep'
            }
        }

        then {
            assert workflow.failed
            assertAll(
                { assert workflow.stdout.toString().contains("This path is not available within annotation-cache") }
            )
        }
    }
}
