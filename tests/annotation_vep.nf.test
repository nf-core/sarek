def projectDir = new File('.').absolutePath
def modules_testdata_base_path = 'https://raw.githubusercontent.com/nf-core/test-datasets/modules/data/'

nextflow_pipeline {

    name "Test pipeline"
    script "../main.nf"
    tag "pipeline"
    tag "pipeline_sarek"

    def test_scenario = [
        [
            name: "Fails with profile test --tools vep --vep_cache_version 1 --build_only_index",
            params: [
                input: "${projectDir}/tests/csv/3.0/vcf_single.csv",
                step: 'annotate',
                vep_cache: 's3://annotation-cache/vep_cache/',
                vep_cache_version: 1,
                input: false,
                build_only_index: true,
                tools: 'vep'
            ],
            failure: true,
            stdout: "This path is not available within annotation-cache"
        ],
        [
            name: "Fails with profile test --dbnsfp and no dbnsfp_tbi",
            params: [
                input: "${projectDir}/tests/csv/3.0/vcf_single.csv",
                step: 'annotate',
                vep_cache: 's3://annotation-cache/vep_cache/',
                dbnsfp: modules_testdata_base_path + 'genomics/homo_sapiens/genome/chr21/germlineresources/dbsnp_138.hg38.vcf.gz',
                tools: 'vep'
            ],
            failure: true,
            stdout: "Execution halted due to dbnsfp inconsistency"
        ]
    ]

    // Generate tests for each scenario
    test_scenario.each { scenario ->
        test(scenario.name, UTILS.get_test(scenario))
    }
}
