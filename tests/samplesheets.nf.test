nextflow_pipeline {

    name "Test pipeline"
    script "../main.nf"
    tag "pipeline"
    tag "pipeline_sarek"
    tag "cpu"

    test("-profile test --input tests/csv/3.0/sample_with_space.csv") {
        when {
            params {
                input = "${projectDir}/tests/csv/3.0/sample_with_space.csv"
                outdir = "$outputDir"
            }
        }

        then {
            assertAll(
                { assert workflow.failed},
                { assert snapshot(
                    workflow.stderr.toString().split(",")[0..1,3..5]
                ).match() }
            )
        }
    }

    test("-profile test --tools stelka --step variant_calling --input recalibrated_somatic_two_normal_one_sample.csv") {

        when {
            params {
                modules_testdata_base_path = 'https://raw.githubusercontent.com/nf-core/test-datasets/modules/data/'
                fasta = params.modules_testdata_base_path + 'genomics/homo_sapiens/genome/chr21/sequence/genome.fasta'
                fasta_fai = params.modules_testdata_base_path + 'genomics/homo_sapiens/genome/chr21/sequence/genome.fasta.fai'
                intervals = params.modules_testdata_base_path + 'genomics/homo_sapiens/genome/chr21/sequence/multi_intervals.bed'
                input = "${projectDir}/tests/csv/3.0/recalibrated_somatic_two_normal_one_sample.csv"
                outdir = "$outputDir"
                step = "variant_calling"
                tools = 'strelka'
            }
        }

        then {
            assertAll(
                { assert workflow.failed},
                { assert snapshot(
                    "stderr",
                    workflow.stderr.toString().split(","),
                    "stdout",
                    workflow.stdout.toString().split(",")
                ).match() }
            )
        }
    }
}
