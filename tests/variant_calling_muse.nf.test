nextflow_pipeline {

    name "Test pipeline"
    script "../main.nf"
    tag "pipeline"
    tag "pipeline_sarek"
    tag "cpu"

    test("Run with profile test | --tools muse | somatic") {

        when {
            params {
                modules_testdata_base_path = 'https://raw.githubusercontent.com/nf-core/test-datasets/modules/data/'
                input                      = "${projectDir}/tests/csv/3.0/recalibrated_somatic.csv"
                genome                     = null
                igenomes_ignore            = true
                chr_dir                    = "${params.modules_testdata_base_path}/genomics/homo_sapiens/genome/chr21/sequence/chromosomes.tar.gz"
                dbsnp                      = "${params.modules_testdata_base_path}/genomics/homo_sapiens/genome/chr21/germlineresources/dbsnp_138.hg38.vcf.gz"
                dbsnp_tbi                  = "${params.modules_testdata_base_path}/genomics/homo_sapiens/genome/chr21/germlineresources/dbsnp_138.hg38.vcf.gz.tbi"
                fasta                      = "${params.modules_testdata_base_path}/genomics/homo_sapiens/genome/chr21/sequence/genome.fasta"
                fasta_fai                  = "${params.modules_testdata_base_path}/genomics/homo_sapiens/genome/chr21/sequence/genome.fasta.fai"
                germline_resource          = "${params.modules_testdata_base_path}/genomics/homo_sapiens/genome/chr21/germlineresources/gnomAD.r2.1.1.vcf.gz"
                germline_resource_tbi      = "${params.modules_testdata_base_path}/genomics/homo_sapiens/genome/chr21/germlineresources/gnomAD.r2.1.1.vcf.gz.tbi"
                intervals                  = "${params.modules_testdata_base_path}/genomics/homo_sapiens/genome/chr21/sequence/multi_intervals.bed"
                pon                        = "${params.modules_testdata_base_path}/genomics/homo_sapiens/genome/chr21/germlineresources/mills_and_1000G.indels.hg38.vcf.gz"
                pon_tbi                    = "${params.modules_testdata_base_path}/genomics/homo_sapiens/genome/chr21/germlineresources/mills_and_1000G.indels.hg38.vcf.gz.tbi"
                ngscheckmate_bed           = "${params.modules_testdata_base_path}/genomics/homo_sapiens/genome/chr21/germlineresources/SNP_GRCh38_hg38_wChr.bed"
                nucleotides_per_second     = 20
                step                       = 'variant_calling'
                tools                      = 'muse'
                wes                        = true
                outdir                     = "$outputDir"
            }
        }

        then {
            // stable_name: All files + folders in ${params.outdir}/ with a stable name
            def stable_name = getAllFilesFromDir(params.outdir, relative: true, includeDir: true, ignore: ['pipeline_info/*.{html,json,txt}'])
            // stable_path: All files in ${params.outdir}/ with stable content
            def stable_path = getAllFilesFromDir(params.outdir, ignoreFile: 'tests/.nftignore')
            // bam_files: All bam files
            def bam_files   = getAllFilesFromDir(params.outdir, include: ['**/*.bam'])
            def fasta       = params.modules_testdata_base_path + 'genomics/homo_sapiens/genome/genome.fasta'
            assertAll(
                { assert workflow.success},
                { assert snapshot(
                    // Number of successful tasks
                    workflow.trace.succeeded().size(),
                    // pipeline versions.yml file for multiqc from which Nextflow version is removed because we tests pipelines on multiple Nextflow versions
                    removeNextflowVersion("$outputDir/pipeline_info/nf_core_sarek_software_mqc_versions.yml"),
                    // All stable path name, with a relative path
                    stable_name,
                    // All files with stable contents
                    stable_path,
                    // All bam files
                    bam_files.collect{ file -> [ file.getName(), bam(file.toString(), fasta).getReadsMD5() ] }
                ).match() }
            )
        }
    }

    test("Run with profile test | --tools muse | somatic | stub") {
        options "-stub"
        when {
            params {
                modules_testdata_base_path = 'https://raw.githubusercontent.com/nf-core/test-datasets/modules/data/'
                input                      = "${projectDir}/tests/csv/3.0/recalibrated_somatic.csv"
                genome                     = null
                igenomes_ignore            = true
                chr_dir                    = "${params.modules_testdata_base_path}/genomics/homo_sapiens/genome/chr21/sequence/chromosomes.tar.gz"
                dbsnp                      = "${params.modules_testdata_base_path}/genomics/homo_sapiens/genome/chr21/germlineresources/dbsnp_138.hg38.vcf.gz"
                dbsnp_tbi                  = "${params.modules_testdata_base_path}/genomics/homo_sapiens/genome/chr21/germlineresources/dbsnp_138.hg38.vcf.gz.tbi"
                fasta                      = "${params.modules_testdata_base_path}/genomics/homo_sapiens/genome/chr21/sequence/genome.fasta"
                fasta_fai                  = "${params.modules_testdata_base_path}/genomics/homo_sapiens/genome/chr21/sequence/genome.fasta.fai"
                germline_resource          = "${params.modules_testdata_base_path}/genomics/homo_sapiens/genome/chr21/germlineresources/gnomAD.r2.1.1.vcf.gz"
                germline_resource_tbi      = "${params.modules_testdata_base_path}/genomics/homo_sapiens/genome/chr21/germlineresources/gnomAD.r2.1.1.vcf.gz.tbi"
                intervals                  = "${params.modules_testdata_base_path}/genomics/homo_sapiens/genome/chr21/sequence/multi_intervals.bed"
                pon                        = "${params.modules_testdata_base_path}/genomics/homo_sapiens/genome/chr21/germlineresources/mills_and_1000G.indels.hg38.vcf.gz"
                pon_tbi                    = "${params.modules_testdata_base_path}/genomics/homo_sapiens/genome/chr21/germlineresources/mills_and_1000G.indels.hg38.vcf.gz.tbi"
                ngscheckmate_bed           = "${params.modules_testdata_base_path}/genomics/homo_sapiens/genome/chr21/germlineresources/SNP_GRCh38_hg38_wChr.bed"
                nucleotides_per_second     = 20
                step                       = 'variant_calling'
                tools                      = 'muse'
                wes                        = true
                outdir                     = "$outputDir"
            }
        }

        then {
            // stable_name: All files + folders in ${params.outdir}/ with a stable name
            def stable_name = getAllFilesFromDir(params.outdir, relative: true, includeDir: true, ignore: ['pipeline_info/*.{html,json,txt}'])
            // stable_path: All files in ${params.outdir}/ with stable content
            def stable_path = getAllFilesFromDir(params.outdir, ignoreFile: 'tests/.nftignore')
            // bam_files: All bam files
            def bam_files   = getAllFilesFromDir(params.outdir, include: ['**/*.bam'])
            def fasta       = params.modules_testdata_base_path + 'genomics/homo_sapiens/genome/genome.fasta'
            assertAll(
                { assert workflow.success},
                { assert snapshot(
                    // Number of successful tasks
                    workflow.trace.succeeded().size(),
                    // pipeline versions.yml file for multiqc from which Nextflow version is removed because we tests pipelines on multiple Nextflow versions
                    removeNextflowVersion("$outputDir/pipeline_info/nf_core_sarek_software_mqc_versions.yml"),
                    // All stable path name, with a relative path
                    stable_name,
                    // All files with stable contents
                    stable_path,
                    // All bam files
                    bam_files.collect{ file -> [ file.getName(), bam(file.toString(), fasta).getReadsMD5() ] }
                ).match() }
            )
        }
    }

}
