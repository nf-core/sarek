nextflow_pipeline {

    name "Test pipeline"
    script "../main.nf"
    tag "pipeline"
    tag "pipeline_sarek"
    tag "cpu"

    test("-profile test --tools null --skip_tools baserecalibrator,fastqc,markduplicates,mosdepth,multiqc,samtools") {

        when {
            params {
                intervals                  = "${params.modules_testdata_base_path}/genomics/homo_sapiens/genome/genome.multi_intervals.bed"
                nucleotides_per_second     = 20
                tools                      = null
                wes                        = true
                outdir                     = "$outputDir"
                skip_tools                 = 'baserecalibrator,fastqc,markduplicates,mosdepth,multiqc,samtools'
            }
        }

        then {
            // stable_name: All files + folders in ${params.outdir}/ with a stable name
            def stable_name = getAllFilesFromDir(params.outdir, relative: true, includeDir: true, ignore: ['pipeline_info/*.{html,json,txt}'])
            // stable_path: All files in ${params.outdir}/ with stable content
            def stable_path = getAllFilesFromDir(params.outdir, ignoreFile: 'tests/.nftignore')
            def cram_files  = getAllFilesFromDir(params.outdir, include: ['**/*.cram'])
            // Fasta file for cram verification with nft-bam
            def fasta_base  = 'https://raw.githubusercontent.com/nf-core/test-datasets/modules/data/'
            def fasta       = fasta_base + 'genomics/homo_sapiens/genome/genome.fasta'
            assert workflow.success
            assertAll(
                { assert snapshot(
                    // Number of successful tasks
                    workflow.trace.succeeded().size(),
                    // pipeline versions.yml file for multiqc from which Nextflow version is removed because we tests pipelines on multiple Nextflow versions
                    removeNextflowVersion("$outputDir/pipeline_info/nf_core_sarek_software_mqc_versions.yml"),
                    // All stable path name, with a relative path
                    stable_name,
                    // All files with stable contents
                    stable_path.isEmpty() ? 'No stable content' : stable_path,
                    // All cram files
                    cram_files.collect { file -> file.getName() + ":md5," +  cram(file.toString(), fasta).readsMD5 }
                ).match() }
            )
        }
    }

    test("-profile test --no_intervals --tools null --skip_tools baserecalibrator,fastqc,markduplicates,mosdepth,multiqc,samtools") {

        when {
            params {
                no_intervals = true
                tools        = null
                outdir       = "$outputDir"
                skip_tools   = 'baserecalibrator,fastqc,markduplicates,mosdepth,multiqc,samtools'
            }
        }

        then {
            // stable_name: All files + folders in ${params.outdir}/ with a stable name
            def stable_name = getAllFilesFromDir(params.outdir, relative: true, includeDir: true, ignore: ['pipeline_info/*.{html,json,txt}'])
            // stable_path: All files in ${params.outdir}/ with stable content
            def stable_path = getAllFilesFromDir(params.outdir, ignoreFile: 'tests/.nftignore')
            def cram_files  = getAllFilesFromDir(params.outdir, include: ['**/*.cram'])
            // Fasta file for cram verification with nft-bam
            def fasta_base  = 'https://raw.githubusercontent.com/nf-core/test-datasets/modules/data/'
            def fasta       = fasta_base + 'genomics/homo_sapiens/genome/genome.fasta'
            assert workflow.success
            assertAll(
                { assert snapshot(
                    // Number of successful tasks
                    workflow.trace.succeeded().size(),
                    // pipeline versions.yml file for multiqc from which Nextflow version is removed because we tests pipelines on multiple Nextflow versions
                    removeNextflowVersion("$outputDir/pipeline_info/nf_core_sarek_software_mqc_versions.yml"),
                    // All stable path name, with a relative path
                    stable_name,
                    // All files with stable contents
                    stable_path.isEmpty() ? 'No stable content' : stable_path,
                    // All cram files
                    cram_files.collect { file -> file.getName() + ":md5," +  cram(file.toString(), fasta).readsMD5 }
                ).match() }
            )
        }
    }

    test("-profile test --intervals false --save_reference --tools null --skip_tools baserecalibrator,fastqc,markduplicates,mosdepth,multiqc,samtools") {

        when {
            params {
                intervals      = false
                save_reference = true
                tools          = null
                outdir         = "$outputDir"
                skip_tools     = 'baserecalibrator,fastqc,markduplicates,mosdepth,multiqc,samtools'
            }
        }

        then {
            // stable_name: All files + folders in ${params.outdir}/ with a stable name
            def stable_name = getAllFilesFromDir(params.outdir, relative: true, includeDir: true, ignore: ['pipeline_info/*.{html,json,txt}'])
            // stable_path: All files in ${params.outdir}/ with stable content
            def stable_path = getAllFilesFromDir(params.outdir, ignoreFile: 'tests/.nftignore')
            def cram_files  = getAllFilesFromDir(params.outdir, include: ['**/*.cram'])
            // Fasta file for cram verification with nft-bam
            def fasta_base  = 'https://raw.githubusercontent.com/nf-core/test-datasets/modules/data/'
            def fasta       = fasta_base + 'genomics/homo_sapiens/genome/genome.fasta'
            assert workflow.success
            assertAll(
                { assert snapshot(
                    // Number of successful tasks
                    workflow.trace.succeeded().size(),
                    // pipeline versions.yml file for multiqc from which Nextflow version is removed because we tests pipelines on multiple Nextflow versions
                    removeNextflowVersion("$outputDir/pipeline_info/nf_core_sarek_software_mqc_versions.yml"),
                    // All stable path name, with a relative path
                    stable_name,
                    // All files with stable contents
                    stable_path.isEmpty() ? 'No stable content' : stable_path,
                    // All cram files
                    cram_files.collect { file -> file.getName() + ":md5," +  cram(file.toString(), fasta).readsMD5 }
                ).match() }
            )
        }
    }

    test("-profile test --tools null --skip_tools baserecalibrator,fastqc,markduplicates,mosdepth,multiqc,samtools -with-stub") {
        options "-stub"

        when {
            params {
                intervals                  = "${params.modules_testdata_base_path}/genomics/homo_sapiens/genome/genome.multi_intervals.bed"
                nucleotides_per_second     = 20
                tools                      = null
                wes                        = true
                outdir                     = "$outputDir"
                skip_tools                 = 'baserecalibrator,fastqc,markduplicates,mosdepth,multiqc,samtools'
            }
        }

        then {
            // stable_name: All files + folders in ${params.outdir}/ with a stable name
            def stable_name = getAllFilesFromDir(params.outdir, relative: true, includeDir: true, ignore: ['pipeline_info/*.{html,json,txt}'])
            assert workflow.success
            assertAll(
                { assert snapshot(
                    // Number of successful tasks
                    workflow.trace.succeeded().size(),
                    // All stable path name, with a relative path
                    stable_name,
                    // All files with stable contents
                    stable_path.isEmpty() ? 'No stable content' : stable_path,
                ).match() }
            )
        }
    }

    test("-profile test --no_intervals --tools null --skip_tools baserecalibrator,fastqc,markduplicates,mosdepth,multiqc,samtools -with-stub") {
        options "-stub"

        when {
            params {
                no_intervals = true
                tools        = null
                outdir       = "$outputDir"
                skip_tools   = 'baserecalibrator,fastqc,markduplicates,mosdepth,multiqc,samtools'
            }
        }

        then {
            // stable_name: All files + folders in ${params.outdir}/ with a stable name
            def stable_name = getAllFilesFromDir(params.outdir, relative: true, includeDir: true, ignore: ['pipeline_info/*.{html,json,txt}'])
            assert workflow.success
            assertAll(
                { assert snapshot(
                    // Number of successful tasks
                    workflow.trace.succeeded().size(),
                    // All stable path name, with a relative path
                    stable_name,
                    // All files with stable contents
                    stable_path.isEmpty() ? 'No stable content' : stable_path,
                ).match() }
            )
        }
    }

    test("-profile test --intervals false --save_reference --tools null --skip_tools baserecalibrator,fastqc,markduplicates,mosdepth,multiqc,samtools -with-stub") {
        options "-stub"

        when {
            params {
                intervals      = false
                save_reference = true
                tools          = null
                outdir         = "$outputDir"
                skip_tools     = 'baserecalibrator,fastqc,markduplicates,mosdepth,multiqc,samtools'
            }
        }

        then {
            // stable_name: All files + folders in ${params.outdir}/ with a stable name
            def stable_name = getAllFilesFromDir(params.outdir, relative: true, includeDir: true, ignore: ['pipeline_info/*.{html,json,txt}'])
            assert workflow.success
            assertAll(
                { assert snapshot(
                    // Number of successful tasks
                    workflow.trace.succeeded().size(),
                    // All stable path name, with a relative path
                    stable_name,
                    // All files with stable contents
                    stable_path.isEmpty() ? 'No stable content' : stable_path,
                ).match() }
            )
        }
    }
}
