def projectDir = new File('.').absolutePath

nextflow_pipeline {

    name "Test pipeline"
    script "../main.nf"
    tag "pipeline"
    tag "pipeline_sarek"

    def test_scenario = [
        [
            name: "-profile test --tools sentieon_haplotyper",
            params: [
                input: "${projectDir}/tests/csv/3.0/mapped_single_bam.csv",
                tools: "sentieon_haplotyper",
                step: "variant_calling"
            ]
        ],
        [
            name: "-profile test --tools sentieon_haplotyper --no_intervals",
            params: [
                input: "${projectDir}/tests/csv/3.0/mapped_single_bam.csv",
                tools: "sentieon_haplotyper",
                step: "variant_calling",
                no_intervals: true
            ]
        ],
        [
            name: "-profile test --tools sentieon_haplotyper --skip_tools haplotyper_filter",
            params: [
                input: "${projectDir}/tests/csv/3.0/mapped_single_bam.csv",
                tools: "sentieon_haplotyper",
                step: "variant_calling",
                skip_tools: "haplotyper_filter"
            ]
        ],
        [
            name: "-profile test --tools sentieon_haplotyper --joint_germline --sentieon_haplotyper_emit_mode gvcf",
            params: [
                input: "${projectDir}/tests/csv/3.0/mapped_single_bam.csv",
                tools: "sentieon_haplotyper",
                step: "variant_calling",
                skip_tools: "haplotyper_filter",
                joint_germline: true,
                sentieon_haplotyper_emit_mode: "gvcf"
            ]
        ]
    ]

    test_scenario.each { scenario ->
        test(scenario.name, UTILS.get_test(scenario))
    }
}
