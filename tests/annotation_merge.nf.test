nextflow_pipeline {

    name "Test pipeline"
    script "../main.nf"
    tag "pipeline"
    tag "pipeline_sarek"
    tag "cpu"

    def test_scenario = [
        [
            name: "-profile test --tools merge",
            params: [
                input: "${projectDir}/tests/csv/3.0/vcf_single.csv",
                step: 'annotate',
                snpeff_cache: 's3://annotation-cache/snpeff_cache/',
                vep_cache: 's3://annotation-cache/vep_cache/',
                tools: 'merge'
            ]
        ],
        [
            name: "-profile test --tools merge,snpeff,vep",
            params: [
                input: "${projectDir}/tests/csv/3.0/vcf_single.csv",
                step: 'annotate',
                snpeff_cache: 's3://annotation-cache/snpeff_cache/',
                vep_cache: 's3://annotation-cache/vep_cache/',
                tools: 'merge,snpeff,vep'
            ]
        ]
    ]

    // Generate tests for each scenario
    test_scenario.each { scenario ->
        test(scenario.name, UTILS.get_test(scenario))
    }
}
