def projectDir = new File('.').absolutePath

nextflow_pipeline {

    name "Test pipeline"
    script "../main.nf"
    tag "pipeline"
    tag "pipeline_sarek"
    tag "sentieon"

    def test_scenario = [
        [
            name: "-profile test --tools sentieon_dedup --step markduplicates --input tests/csv/3.0/mapped_single_bam.csv",
            params: [
                input: "${projectDir}/tests/csv/3.0/mapped_single_bam.csv",
                step: 'markduplicates',
                tools: 'sentieon_dedup'
            ]
        ],
        [
            name: "-profile test --tools sentieon_dedup --step markduplicates --input tests/csv/3.0/mapped_single_cram.csv",
            params: [
                input: "${projectDir}/tests/csv/3.0/mapped_single_cram.csv",
                step: 'markduplicates',
                tools: 'sentieon_dedup'
            ]
        ],
        [
            name: "-profile test --tools sentieon_dedup --step markduplicates --input tests/csv/3.0/mapped_single_cram.csv --sentieon_consensus",
            params: [
                input: "${projectDir}/tests/csv/3.0/mapped_single_cram.csv",
                step: 'markduplicates',
                tools: 'sentieon_dedup',
                sentieon_consensus: true
            ]
        ],
        [
            name: "-profile test --tools sentieon_dedup --step markduplicates --input tests/csv/3.0/bam_umi_header.csv --umi_in_read_header",
            params: [
                input: "${projectDir}/tests/csv/3.0/bam_umi_header.csv",
                step: 'markduplicates',
                tools: 'sentieon_dedup',
                umi_in_read_header: true
            ]
        ],
        [
            name: "-profile test --tools sentieon_dedup --step markduplicates --input tests/csv/3.0/bam_umi_header.csv --sentieon_consensus --umi_in_read_header",
            params: [
                input: "${projectDir}/tests/csv/3.0/bam_umi_header.csv",
                step: 'markduplicates',
                tools: 'sentieon_dedup',
                sentieon_consensus: true,
                umi_in_read_header: true
            ]
        ]
    ]

    // Generate tests for each scenario
    test_scenario.each { scenario ->
        test(scenario.name, UTILS.get_test(scenario))
    }
}
