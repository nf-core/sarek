/*
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    Config file for defining DSL2 per module options and publishing paths
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    Available keys to override module options:
        ext.args   = Additional arguments appended to command in module.
        ext.args2  = Second set of arguments appended to command in module (multi-tool modules).
        ext.args3  = Third set of arguments appended to command in module (multi-tool modules).
        ext.prefix = File name prefix for output files.
----------------------------------------------------------------------------------------
*/

// PREPARE_GENOME && PREPARE_REFERENCE_CNVKIT
process {

    withName: 'BWAMEM1_INDEX' {
        publishDir       = [
            mode: params.publish_dir_mode,
            path: { "${params.outdir}/reference" },
            pattern: "bwa",
            saveAs: { params.save_reference || params.build_only_index ? it : null }
        ]
    }

    withName: 'BWAMEM2_INDEX' {
        publishDir       = [
            mode: params.publish_dir_mode,
            path: { "${params.outdir}/reference" },
            pattern: "bwamem2",
            saveAs: { params.save_reference || params.build_only_index ? it : null }
        ]
    }

    withName: 'CNVKIT_ANTITARGET' {
        ext.when         = { params.tools && params.tools.split(',').contains('cnvkit') }
        publishDir       = [
            mode: params.publish_dir_mode,
            path: { "${params.outdir}/reference" },
            pattern: "*{bed}",
            saveAs: { params.save_reference || params.build_only_index ? "cnvkit/${it}" : null }
        ]
    }

    withName: 'CNVKIT_REFERENCE' {
        ext.prefix       = { 'cnvkit' }
        ext.when         = { params.tools && params.tools.split(',').contains('cnvkit') && !params.cnvkit_reference }
        publishDir       = [
            mode: params.publish_dir_mode,
            path: { "${params.outdir}/reference" },
            pattern: "*{cnn}",
            saveAs: { params.save_reference || params.build_only_index ? "cnvkit/${it}" : null }
        ]
    }

    withName: 'DRAGMAP_HASHTABLE' {
        publishDir = [
            mode: params.publish_dir_mode,
            path: { "${params.outdir}/reference" },
            pattern: "dragmap",
            saveAs: { params.save_reference || params.build_only_index ? it : null }
        ]
    }

    withName: 'GATK4_CREATESEQUENCEDICTIONARY' {
        publishDir       = [
            mode: params.publish_dir_mode,
            path: { "${params.outdir}/reference/dict" },
            pattern: "*dict",
            saveAs: { params.save_reference || params.build_only_index ? it : null }
        ]
    }

    withName: 'MSISENSORPRO_SCAN' {
        ext.when         = { params.tools && params.tools.split(',').contains('msisensorpro') }
        publishDir       = [
            mode: params.publish_dir_mode,
            path: { "${params.outdir}/reference/msi" },
            pattern: "*list",
            saveAs: { params.save_reference || params.build_only_index ? it : null }
        ]
    }

    withName: 'SAMTOOLS_FAIDX' {
        publishDir       = [
            mode: params.publish_dir_mode,
            path: { "${params.outdir}/reference/fai" },
            pattern: "*fai",
            saveAs: { params.save_reference || params.build_only_index ? it : null }
        ]
    }

    withName: 'TABIX_BCFTOOLS_ANNOTATIONS' {
        publishDir       = [
            mode: params.publish_dir_mode,
            path: { "${params.outdir}/reference/bcfann" },
            pattern: "*vcf.gz.tbi",
            saveAs: { params.save_reference || params.build_only_index ? it : null }
        ]
    }

    withName: 'TABIX_DBSNP' {
        publishDir       = [
            mode: params.publish_dir_mode,
            path: { "${params.outdir}/reference/dbsnp" },
            pattern: "*vcf.gz.tbi",
            saveAs: { params.save_reference || params.build_only_index ? it : null }
        ]
    }

    withName: 'TABIX_GERMLINE_RESOURCE' {
        publishDir       = [
            mode: params.publish_dir_mode,
            path: { "${params.outdir}/reference/germline_resource" },
            pattern: "*vcf.gz.tbi",
            saveAs: { params.save_reference || params.build_only_index ? it : null }
        ]
    }

    withName: 'TABIX_KNOWN_INDELS' {
        publishDir       = [
            mode: params.publish_dir_mode,
            path: { "${params.outdir}/reference/known_indels" },
            pattern: "*vcf.gz.tbi",
            saveAs: { params.save_reference || params.build_only_index ? it : null }
        ]
    }

    withName: 'TABIX_KNOWN_SNPS' {
        publishDir       = [
            mode: params.publish_dir_mode,
            path: { "${params.outdir}/reference/known_snps" },
            pattern: "*vcf.gz.tbi",
            saveAs: { params.save_reference || params.build_only_index ? it : null }
        ]
    }

    withName: 'TABIX_PON' {
        publishDir       = [
            mode: params.publish_dir_mode,
            path: { "${params.outdir}/reference/pon" },
            pattern: "*vcf.gz.tbi",
            saveAs: { params.save_reference || params.build_only_index ? it : null }
        ]
    }

    withName: 'UNZIP_ALLELES|UNZIP_LOCI|UNZIP_GC|UNZIP_RT' {
        publishDir       = [
            enabled: false
        ]
    }

    withName: 'UNTAR_CHR_DIR' {
        ext.prefix       = 'chr_dir'
        publishDir       = [
            mode: params.publish_dir_mode,
            path: { "${params.outdir}/reference/" },
            saveAs: { (params.save_reference || params.build_only_index) && !it.equals('versions.yml') ? it : null }
        ]
    }
}
