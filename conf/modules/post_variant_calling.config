/*
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    Config file for defining DSL2 per module options and publishing paths
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    Available keys to override module options:
        ext.args   = Additional arguments appended to command in module.
        ext.args2  = Second set of arguments appended to command in module (multi-tool modules).
        ext.args3  = Third set of arguments appended to command in module (multi-tool modules).
        ext.prefix = File name prefix for output files.
        ext.when   = When to run the module.
----------------------------------------------------------------------------------------
*/

// POSTPROCESSING VCFS
// Like, for instance, concatenating the unannotated, germline vcf-files

process {

    withName: 'GERMLINE_VCFS_CONCAT' {
        ext.args   = { "-a" }
        ext.when   = { params.concatenate_vcfs }
        publishDir = [ enabled: false ]
    }

    withName: 'ADD_INFO_TO_VCF' {
        ext.when   = { params.concatenate_vcfs || params.normalize_vcfs }
        publishDir = [ enabled: false ]
    }

    withName: 'GERMLINE_VCFS_CONCAT_SORT' {
        ext.prefix = { "${meta.id}.germline" }
        ext.when   = { params.concatenate_vcfs }
        publishDir = [
            mode: params.publish_dir_mode,
                path: { "${params.outdir}/variant_calling/concat/${meta.id}/" },
                pattern: "*vcf.gz"
        ]
    }

    withName: 'VCFS_NORM_SORT' {
        ext.prefix = { "${meta.id}.${meta.variantcaller}.norm" }
        ext.when   = { params.normalize_vcfs }
        publishDir = [
            mode: params.publish_dir_mode,
                path: { "${params.outdir}/variant_calling/normalized/${meta.id}/" },
                pattern: "*vcf.gz"
        ]
    }

    withName: 'VCFS_NORM' {
        ext.args = { [
            '--multiallelics -both', // split multiallelic sites into biallelic records and both SNPs and indels should be merged separately into two records
            '--rm-dup all'           // output only the first instance of a record which is present multiple times
        ].join(' ') }
        ext.when   = { params.normalize_vcfs }
        publishDir = [
            mode: params.publish_dir_mode,
                path: { "${params.outdir}/variant_calling/normalized/${meta.id}/" }
        ]
    }

    withName: 'TABIX_EXT_VCF' {
        ext.prefix = { "${input.baseName}" }
        ext.when = { params.concatenate_vcfs || params.normalize_vcfs }
        publishDir = [ enabled: false ]
    }

    withName: 'TABIX_GERMLINE_VCFS_CONCAT_SORT' {
        ext.prefix = { "${meta.id}.germline" }
        ext.when   = { params.concatenate_vcfs }
        publishDir = [
            mode: params.publish_dir_mode,
                path: { "${params.outdir}/variant_calling/concat/${meta.id}/" },
                pattern: "*.tbi"
        ]
    }

    withName: 'TABIX_VCFS_NORM_SORT' {
        ext.prefix = { "${meta.id}.${meta.variantcaller}.norm" }
        ext.when   = { params.normalize_vcfs }
        publishDir = [
            mode: params.publish_dir_mode,
                path: { "${params.outdir}/variant_calling/normalized/${meta.id}/" },
                pattern: "*.tbi"
        ]
    }

    // VARLOCIRAPTOR general
    withName: 'FILL_SCENARIO_FILE' {
        ext.prefix = { "${meta.id}.filled" }
        publishDir = [
            mode: params.publish_dir_mode,
                path: { "${params.outdir}/variant_calling/varlociraptor/${meta.id}/" },
        ]
    }

    //
    // VCF_VARLOCIRAPTOR_GERMLINE MODULES
    //
    withName: 'NFCORE_SAREK:SAREK:POST_VARIANTCALLING:VCF_VARLOCIRAPTOR_GERMLINE:VARLOCIRAPTOR_ESTIMATEALIGNMENTPROPERTIES' {
        ext.prefix = { "${meta.id}" }
        publishDir = [
            mode: params.publish_dir_mode,
                path: { "${params.outdir}/variant_calling/varlociraptor/${meta.id}/" },
        ]
    }

    withName: 'NFCORE_SAREK:SAREK:POST_VARIANTCALLING:VCF_VARLOCIRAPTOR_GERMLINE:RBT_VCFSPLIT' {
        ext.prefix = { "${meta.id}.${meta.variantcaller}.split" }
        publishDir = [
            mode: params.publish_dir_mode,
                path: { "${params.outdir}/variant_calling/varlociraptor/${meta.id}/" },
        ]
    }

    withName: 'NFCORE_SAREK:SAREK:POST_VARIANTCALLING:VCF_VARLOCIRAPTOR_GERMLINE:VARLOCIRAPTOR_PREPROCESS' {
        ext.prefix = { "${meta.id}.${meta.variantcaller}.preprocess.${meta.chunk}" }
        publishDir = [
            mode: params.publish_dir_mode,
                path: { "${params.outdir}/variant_calling/varlociraptor/${meta.id}/" },
        ]
    }

    withName: 'NFCORE_SAREK:SAREK:POST_VARIANTCALLING:VCF_VARLOCIRAPTOR_GERMLINE:VARLOCIRAPTOR_CALLVARIANTS' {
        ext.prefix = { "${meta.id}.${meta.variantcaller}.call.${meta.chunk}" }
        publishDir = [
            mode: params.publish_dir_mode,
                path: { "${params.outdir}/variant_calling/varlociraptor/${meta.id}/" },
        ]
    }

    withName: 'NFCORE_SAREK:SAREK:POST_VARIANTCALLING:VCF_VARLOCIRAPTOR_GERMLINE:SORT_CALLED_CHUNKS' {
        ext.prefix = { "${meta.id}.${meta.variantcaller}.sort.${meta.chunk}" }
        ext.args   = { '--output-type z --write-index=tbi' }
        publishDir = [
            mode: params.publish_dir_mode,
                path: { "${params.outdir}/variant_calling/varlociraptor/${meta.id}/" },
        ]
    }

    withName: 'NFCORE_SAREK:SAREK:POST_VARIANTCALLING:VCF_VARLOCIRAPTOR_GERMLINE:MERGE_CALLED_CHUNKS' {
        ext.prefix = { "${meta.id}.${meta.variantcaller}.varlociraptor" }
        ext.args   = { '--allow-overlaps --output-type z --write-index=tbi' }
        publishDir = [
            mode: params.publish_dir_mode,
                path: { "${params.outdir}/variant_calling/varlociraptor/" },
        ]
    }

    //
    // VCF_VARLOCIRAPTOR_SOMATIC MODULES
    //
    withName: 'NFCORE_SAREK:SAREK:POST_VARIANTCALLING:VCF_VARLOCIRAPTOR_SOMATIC:ALIGNMENTPROPERTIES_NORMAL' {
        ext.prefix = { "${meta.normal_id}" }
        publishDir = [
            mode: params.publish_dir_mode,
                path: { "${params.outdir}/variant_calling/varlociraptor/${meta.normal_id}/" },
        ]
    }

    withName: 'NFCORE_SAREK:SAREK:POST_VARIANTCALLING:VCF_VARLOCIRAPTOR_SOMATIC:VCFSPLIT_NORMAL' {
        ext.prefix = { "${meta.normal_id}.${meta.variantcaller}.split" }
        publishDir = [
            mode: params.publish_dir_mode,
                path: { "${params.outdir}/variant_calling/varlociraptor/${meta.normal_id}/" },
        ]
    }

    withName: 'NFCORE_SAREK:SAREK:POST_VARIANTCALLING:VCF_VARLOCIRAPTOR_SOMATIC:PREPROCESS_NORMAL' {
        ext.prefix = { "${meta.normal_id}.${meta.variantcaller}.preprocess.${meta.chunk}" }
        publishDir = [
            mode: params.publish_dir_mode,
                path: { "${params.outdir}/variant_calling/varlociraptor/${meta.normal_id}/" },
        ]
    }

    withName: 'NFCORE_SAREK:SAREK:POST_VARIANTCALLING:VCF_VARLOCIRAPTOR_SOMATIC:ALIGNMENTPROPERTIES_TUMOR' {
        ext.prefix = { "${meta.tumor_id}" }
        publishDir = [
            mode: params.publish_dir_mode,
                path: { "${params.outdir}/variant_calling/varlociraptor/${meta.tumor_id}/" },
        ]
    }

    withName: 'NFCORE_SAREK:SAREK:POST_VARIANTCALLING:VCF_VARLOCIRAPTOR_SOMATIC:VCFSPLIT_TUMOR' {
        ext.prefix = { "${meta.tumor_id}.${meta.variantcaller}.split" }
        publishDir = [
            mode: params.publish_dir_mode,
                path: { "${params.outdir}/variant_calling/varlociraptor/${meta.tumor_id}/" },
        ]
    }

    withName: 'NFCORE_SAREK:SAREK:POST_VARIANTCALLING:VCF_VARLOCIRAPTOR_SOMATIC:PREPROCESS_TUMOR' {
        ext.prefix = { "${meta.tumor_id}.${meta.variantcaller}.preprocess.${meta.chunk}" }
        publishDir = [
            mode: params.publish_dir_mode,
                path: { "${params.outdir}/variant_calling/varlociraptor/${meta.tumor_id}/" },
        ]
    }

    withName: 'NFCORE_SAREK:SAREK:POST_VARIANTCALLING:VCF_VARLOCIRAPTOR_SOMATIC:VARLOCIRAPTOR_CALLVARIANTS' {
        ext.prefix = { "${meta.id}.${meta.variantcaller}.call.${meta.chunk}" }
        publishDir = [
            mode: params.publish_dir_mode,
                path: { "${params.outdir}/variant_calling/varlociraptor/${meta.id}.somatic/" },
        ]
    }

    withName: 'NFCORE_SAREK:SAREK:POST_VARIANTCALLING:VCF_VARLOCIRAPTOR_SOMATIC:SORT_CALLED_CHUNKS' {
        ext.prefix = { "${meta.id}.${meta.variantcaller}.sort.${meta.chunk}" }
        ext.args   = { '--output-type z --write-index=tbi' }
        publishDir = [
            mode: params.publish_dir_mode,
                path: { "${params.outdir}/variant_calling/varlociraptor/${meta.id}.somatic/" },
        ]
    }

    withName: 'NFCORE_SAREK:SAREK:POST_VARIANTCALLING:VCF_VARLOCIRAPTOR_SOMATIC:MERGE_CALLED_CHUNKS' {
        ext.prefix = { "${meta.id}.${meta.variantcaller}.varlociraptor.somatic" }
        ext.args   = { '--allow-overlaps --output-type z --write-index=tbi' }
        publishDir = [
            mode: params.publish_dir_mode,
                path: { "${params.outdir}/variant_calling/varlociraptor/" },
        ]
    }
}
