
nextflow_function {

    name "Test Functions"
    script "../main.nf"
    config "subworkflows/nf-core/utils_nfcore_pipeline/tests/nextflow.config"
    tag "subworkflows"
    tag "subworkflows_nfcore"
    tag "utils_nfcore_pipeline"
    tag "subworkflows/utils_nfcore_pipeline"

    test("Test Function checkConfigProvided") {

        function "checkConfigProvided"

        then {
            assertAll(
                { assert function.success },
                { assert snapshot(function.result).match() }
            )
        }
    }

    test("Test Function checkProfileProvided") {

        function "checkProfileProvided"

        when {
            function {
                """
                input[0] = []
                """
            }
        }

        then {
            assertAll(
                { assert function.success },
                { assert snapshot(function.result).match() }
            )
        }
    }

    test("Test Function without logColours") {

        function "logColours"

        when {
            function {
                """
                input[0] = true
                """
            }
        }

        then {
            assertAll(
                { assert function.success },
                { assert snapshot(function.result).match() }
            )
        }
    }

    test("Test Function with logColours") {
        function "logColours"

        when {
            function {
                """
                input[0] = false
                """
            }
        }

        then {
            assertAll(
                { assert function.success },
                { assert snapshot(function.result).match() }
            )
        }
    }

    test("Test Function getSingleReport with a single file") {
        function "getSingleReport"

        when {
            function {
                """
                input[0] = file(params.modules_testdata_base_path + '/generic/tsv/test.tsv', checkIfExists: true)
                """
            }
        }

        then {
            assertAll(
                { assert function.success },
                { assert function.result.contains("test.tsv") }
            )
        }
    }

    test("Test Function getSingleReport with multiple files") {
        function "getSingleReport"

        when {
            function {
                """
                input[0] = [
                    file(params.modules_testdata_base_path + '/generic/tsv/test.tsv', checkIfExists: true),
                    file(params.modules_testdata_base_path + '/generic/tsv/network.tsv', checkIfExists: true),
                    file(params.modules_testdata_base_path + '/generic/tsv/expression.tsv', checkIfExists: true)
                ]
                """
            }
        }

        then {
            assertAll(
                { assert function.success },
                { assert function.result.contains("test.tsv") },
                { assert !function.result.contains("network.tsv") },
                { assert !function.result.contains("expression.tsv") }
            )
        }
    }
}
