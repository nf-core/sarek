nextflow_workflow {

    name "Test Subworkflow VCF_ANNOTATE_ENSEMBLVEP"
    script "../main.nf"
    workflow "VCF_ANNOTATE_ENSEMBLVEP"

    tag "subworkflows"
    tag "subworkflows_nfcore"
    tag "subworkflows/vcf_annotate_ensemblvep"
    tag "ensemblvep/vep"
    tag "tabix/tabix"

    config "./nextflow.config"

    test("WBcel235 caenorhabditis_elegans 114 - test.vcf.gz") {

        when {
            workflow {
                """
                vep_cache = Channel.of(file('s3://annotation-cache/vep_cache/114_WBcel235/')).collect()

                input[0] = Channel.of([
                    [ id:'test'],
                    file(params.modules_testdata_base_path + 'genomics/sarscov2/illumina/vcf/test.vcf.gz', checkIfExists: true),
                    []
                ])
                input[1] = [[id:'null'],[]]
                input[2] = "WBcel235"
                input[3] = "caenorhabditis_elegans"
                input[4] = "114"
                input[5] = vep_cache
                input[6] = []
                """
            }
        }

        then {
            assert workflow.success
            assertAll(
                { assert snapshot(
                    // Not capturing the content of the VCF files as vep produce an empty VCF for this test
                    // Which is kinda expected as vep annotates a sarscov2 vcf with WBcel235
                    workflow.out.vcf_tbi.collect { [it[0], file(it[1]).name, file(it[2]).name] },
                    workflow.out.reports.collect { it instanceof String ? file(it).name : it },
                    workflow.out.versions.collect { it }
                ).match() }
            )
        }
    }

    test("WBcel235 caenorhabditis_elegans 114 - test.vcf.gz - stub") {

        options "-stub"

        when {
            workflow {
                """
                vep_cache = Channel.of(file("${projectDir}")).collect()

                input[0] = Channel.of([
                    [ id:'test'],
                    file(params.modules_testdata_base_path + 'genomics/sarscov2/illumina/vcf/test.vcf.gz', checkIfExists: true),
                    []
                ])
                input[1] = [[id:'null'],[]]
                input[2] = "WBcel235"
                input[3] = "caenorhabditis_elegans"
                input[4] = "114"
                input[5] = vep_cache
                input[6] = []
                """
            }
        }

        then {
            assert workflow.success
            assertAll(
                { assert snapshot(workflow.out).match() }
            )
        }
    }
}
