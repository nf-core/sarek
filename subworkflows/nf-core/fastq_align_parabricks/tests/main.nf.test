nextflow_workflow {

    name "Test Subworkflow FASTQ_ALIGN_PARABRICKS"
    script "../main.nf"
    workflow "FASTQ_ALIGN_PARABRICKS"
    config "./nextflow.config"

    tag "subworkflows"
    tag "subworkflows_nfcore"
    tag "subworkflows/fastq_align_parabricks"
    tag "parabricks"
    tag "parabricks/fq2bam"
    tag "parabricks/applybqsr"
    tag "bwa"
    tag "bwa/index"
    tag "gpu"

    setup {
        run("BWA_INDEX") {
            script "../../../../modules/nf-core/bwa/index/main.nf"
            process {
                """
                input[0] = Channel.of([
                    [ id:'test' ], // meta map
                    file(params.modules_testdata_base_path + 'genomics/sarscov2/genome/genome.fasta', checkIfExists: true)
                ])
                """
            }
        }
    }

    test("sarscov2 single-end [fastq_gz]") {

        when {
            workflow {
                """
                input[0] = Channel.of([
                        [ id:'test', single_end:true ],
                        [ file(params.modules_testdata_base_path + 'genomics/sarscov2/illumina/fastq/test_1.fastq.gz', checkIfExists: true)]
                ])
                input[1] = Channel.value([
                        [id: 'reference'],
                        file(params.modules_testdata_base_path + 'genomics/sarscov2/genome/genome.fasta', checkIfExists: true)
                ])
                input[2] = BWA_INDEX.out.index
                input[3] = Channel.value([
                        [id: 'intervals'],
                        file(params.modules_testdata_base_path + 'genomics/sarscov2/genome/picard/baits.interval_list', checkIfExists: true)
                ])
                input[4] = file(params.modules_testdata_base_path + 'genomics/sarscov2/illumina/vcf/test.vcf.gz', checkIfExists: true)
                """
            }
        }

        then {
            assertAll(
                { assert workflow.success},
                { assert snapshot(
                    workflow.out.bam.collect { meta, bamfile -> bam(bamfile).getReadsMD5() },
                    workflow.out.bai.collect { meta, bai -> file(bai).name },
                    workflow.out.versions
                    ).match()
                }
            )
        }
    }

    test("sarscov2 paired-end [fastq_gz]") {

        when {
            workflow {
                """
                input[0] = Channel.of([
                        [ id:'test', single_end:false ],
                        [
                        file(params.modules_testdata_base_path + 'genomics/sarscov2/illumina/fastq/test_1.fastq.gz', checkIfExists: true),
                        file(params.modules_testdata_base_path + 'genomics/sarscov2/illumina/fastq/test_2.fastq.gz', checkIfExists: true)
                        ]
                ])
                input[1] = Channel.value([
                        [id: 'reference'],
                        file(params.modules_testdata_base_path + 'genomics/sarscov2/genome/genome.fasta', checkIfExists: true)
                ])
                input[2] = BWA_INDEX.out.index
                input[3] = Channel.value([
                        [id: 'intervals'],
                        file(params.modules_testdata_base_path + 'genomics/sarscov2/genome/picard/baits.interval_list', checkIfExists: true)
                ])
                input[4] = file(params.modules_testdata_base_path + 'genomics/sarscov2/illumina/vcf/test.vcf.gz', checkIfExists: true)
                """
            }
        }

        then {
            assertAll(
                { assert workflow.success},
                { assert snapshot(
                    workflow.out.bam.collect { meta, bamfile -> bam(bamfile).getReadsMD5() },
                    workflow.out.bai.collect { meta, bai -> file(bai).name },
                    workflow.out.versions
                    ).match()
                }
            )
        }
    }
}