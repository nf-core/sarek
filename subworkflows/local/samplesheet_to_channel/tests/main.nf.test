nextflow_workflow {

    name "Test Workflow SAMPLESHEET_TO_CHANNEL"
    script "../main.nf"
    workflow "SAMPLESHEET_TO_CHANNEL"

    test("Should run without failures") {
        when {
            params {
            }
            workflow {
                """
                input[0] = Channel.of([ // samplesheet
                    ['patient':'test', 'sample':'test', 'sex':'XX', 'status':0, 'lane':'test_L1'],
                    file(params.modules_testdata_base_path + 'genomics/homo_sapiens/illumina/fastq/test_1.fastq.gz', checkIfExists: true),
                    file(params.modules_testdata_base_path + 'genomics/homo_sapiens/illumina/fastq/test_2.fastq.gz', checkIfExists: true),
                    [], [], [], [], [], [], [], [], []
                ])
                input[1] = Channel.of([ // references
                    ['id':'genome', 'vcf':[]],
                    []
                ])
                input[2] = 'bwa-mem' // aligner
                input[3] = [] // bcftools_annotations
                input[4] = [] // bcftools_annotations_tbi
                input[5] = [] // bcftools_header_lines
                input[6] = false // joint_germline
                input[7] = false // joint_mutect2
                input[8] = false // no_intervals
                input[9] = 'variant' // sentieon_dnascope_emit_mode
                input[10] = 'variant' // sentieon_haplotyper_emit_mode
                input[11] = '' // seq_center
                input[12] = 'ILLUMINA' // seq_platform
                input[13] = 'baserecalibrator' // skip_tools
                input[14] = 'mapping' // step
                input[15] = 'strelka' // tools
                input[16] = [] // umi_read_structure
                input[17] = false // wes
                """
            }
        }

        then {
            assert workflow.success
            assert snapshot(workflow.out).match()
        }
    }
}
