nextflow_process {

    name "Test Process ENSEMBLVEP_VEP"
    script "../main.nf"
    process "ENSEMBLVEP_VEP"
    config "./nextflow.config"

    tag "modules"
    tag "modules_nfcore"
    tag "ensemblvep"
    tag "ensemblvep/vep"

    test("test_ensemblvep_vep_fasta_vcf - stub (not really but linting complains otherwise)") {
        config "./vcf.config"

        when {
            process {
                """
                vep_cache = Channel.of(file('s3://annotation-cache/vep_cache/114_WBcel235/')).collect()

                input[0] = Channel.of([
                    [ id:'test' ], // meta map
                    file(params.modules_testdata_base_path + 'genomics/sarscov2/illumina/vcf/test.vcf', checkIfExists: true),
                    []
                ])
                input[1] = params.vep_genome
                input[2] = params.vep_species
                input[3] = params.vep_cache_version
                input[4] = vep_cache
                input[5] = Channel.value([
                    [id:"fasta"],
                    file(params.modules_testdata_base_path + 'genomics/sarscov2/genome/genome.fasta', checkIfExists: true)
                ])
                input[6] = []
                """
            }
        }

        then {
            assert process.success
            assertAll(
                { assert snapshot(
                    process.out.versions,
                    path(process.out.vcf.get(0).get(1)).vcf.variantsMD5,
                    file(process.out.tbi.get(0).get(1)).name
                ).match() }
            )
        }

    }

    test("test_ensemblvep_vep_fasta_tab_gz") {
        config "./tab.gz.config"

        when {
            process {
                """
                vep_cache = Channel.of(file('s3://annotation-cache/vep_cache/114_WBcel235/')).collect()

                input[0] = Channel.of([
                    [ id:'test' ], // meta map
                    file(params.modules_testdata_base_path + 'genomics/sarscov2/illumina/vcf/test.vcf', checkIfExists: true),
                    []
                ])
                input[1] = params.vep_genome
                input[2] = params.vep_species
                input[3] = params.vep_cache_version
                input[4] = vep_cache
                input[5] = Channel.value([
                    [id:"fasta"],
                    file(params.modules_testdata_base_path + 'genomics/sarscov2/genome/genome.fasta', checkIfExists: true)
                ])
                input[6] = []
                """
            }
        }

        then {
            assert process.success
            assertAll(
                { assert snapshot(process.out.versions).match() },
                { assert path(process.out.tab.get(0).get(1)).linesGzip.contains("## ENSEMBL VARIANT EFFECT PREDICTOR v115.0") }
            )
        }
    }
}
