nextflow_process {

    name "Test Process NGSCHECKMATE_NCM"
    script "../main.nf"
    process "NGSCHECKMATE_NCM"
    config "./nextflow.config"

    tag "modules"
    tag "modules_nfcore"
    tag "ngscheckmate"
    tag "ngscheckmate/ncm"
    tag "bedtools/makewindows"
    tag "bcftools/mpileup"

    setup {

        run("BEDTOOLS_MAKEWINDOWS") {
            script "../../../bedtools/makewindows/main.nf"
            process {
                """
                input[0] = [ [ id:'test' ],
                    file(params.modules_testdata_base_path + 'genomics/sarscov2/genome/bed/test.bed', checkIfExists: true)
                ]
                """
            }
        }

        run("BCFTOOLS_MPILEUP", alias: "BCFTOOLS_MPILEUP1") {
            script "../../../bcftools/mpileup/main.nf"
            process {
                """
                input[0] =  [
                    [ id:'test1' ], // meta map
                    file(params.modules_testdata_base_path + 'genomics/sarscov2/illumina/bam/test.paired_end.sorted.bam', checkIfExists: true),
                    file(params.modules_testdata_base_path + 'genomics/sarscov2/genome/bed/test.bed', checkIfExists: true)
                ]
                input[1] = [ [ id:'sarscov2' ],
                    file(params.modules_testdata_base_path + 'genomics/sarscov2/genome/genome.fasta', checkIfExists: true)
                ]
                input[2] = false
                """
            }
        }

        run("BCFTOOLS_MPILEUP", alias: "BCFTOOLS_MPILEUP2") {
            script "../../../bcftools/mpileup/main.nf"
            process {
                """
                input[0] =  [
                    [ id:'test2' ], // meta map
                    file(params.modules_testdata_base_path + 'genomics/sarscov2/illumina/bam/test.paired_end.sorted.bam', checkIfExists: true),
                    file(params.modules_testdata_base_path + 'genomics/sarscov2/genome/bed/test.bed', checkIfExists: true)
                ]
                input[1] = [ [ id:'sarscov2' ],
                    file(params.modules_testdata_base_path + 'genomics/sarscov2/genome/genome.fasta', checkIfExists: true)
                ]
                input[2] = false
                """
            }
        }

    }


    test("sarscov2 - bam") {
        config "./bam.config"
        when {
            process {
                """
                input[0] = [ [ id: 'combined_bams' ],
                    [
                        file(params.modules_testdata_base_path + 'genomics/sarscov2/illumina/bam/test.paired_end.sorted.bam', checkIfExists: true),
                        file(params.modules_testdata_base_path + 'genomics/sarscov2/illumina/bam/test.paired_end.sorted.bam.bai', checkIfExists: true),
                        file(params.modules_testdata_base_path + 'genomics/sarscov2/illumina/bam/test.paired_end.methylated.sorted.bam', checkIfExists: true),
                        file(params.modules_testdata_base_path + 'genomics/sarscov2/illumina/bam/test.paired_end.methylated.sorted.bam.bai', checkIfExists: true)
                    ]
                ]
                input[1] = BEDTOOLS_MAKEWINDOWS.out.bed
                input[2] = [ [ id:'sarscov2' ],
                    file(params.modules_testdata_base_path + 'genomics/sarscov2/genome/genome.fasta', checkIfExists: true)
                ]
                """
            }
        }

        then {
            assertAll(
                { assert process.success },
                { assert snapshot(
                    file(process.out.corr_matrix[0][1]).name, // Content md5 not stable under conda
                    file(process.out.matched[0][1]).name, // Content md5 not stable under conda
                    file(process.out.all[0][1]).name, // Content md5 not stable under conda
                    process.out.versions
                ).match() }
            )
        }

    }

    test("sarscov2 - vcf") {
        config "./vcf.config"
        when {
            process {
                """
                input[0] = BCFTOOLS_MPILEUP1.out.vcf.combine(BCFTOOLS_MPILEUP2.out.vcf.map{it[1]}).map{meta, one, two -> [meta, [one, two]]}.map{meta, stuff -> [meta, stuff.flatten()]}
                input[1] = BEDTOOLS_MAKEWINDOWS.out.bed
                input[2] = [ [ id:'sarscov2' ],
                    file(params.modules_testdata_base_path + 'genomics/sarscov2/genome/genome.fasta', checkIfExists: true)
                ]
                """
            }
        }

        then {
            assertAll(
                { assert process.success },
                { assert snapshot(
                    process.out.corr_matrix,
                    process.out.matched,
                    process.out.all,
                    file(process.out.pdf[0][1]).name,
                    process.out.versions
                ).match() }
            )
        }

    }

    test("sarscov2 - bam - stub") {

        options "-stub"
        config "./bam.config"
        when {
            process {
                """
                input[0] = [ [ id: 'combined_bams' ],
                    [
                        file(params.modules_testdata_base_path + 'genomics/sarscov2/illumina/bam/test.paired_end.sorted.bam', checkIfExists: true),
                        file(params.modules_testdata_base_path + 'genomics/sarscov2/illumina/bam/test.paired_end.sorted.bam.bai', checkIfExists: true),
                        file(params.modules_testdata_base_path + 'genomics/sarscov2/illumina/bam/test.paired_end.methylated.sorted.bam', checkIfExists: true),
                        file(params.modules_testdata_base_path + 'genomics/sarscov2/illumina/bam/test.paired_end.methylated.sorted.bam.bai', checkIfExists: true)
                    ]
                ]
                input[1] = BEDTOOLS_MAKEWINDOWS.out.bed
                input[2] = [ [ id:'sarscov2' ],
                    file(params.modules_testdata_base_path + 'genomics/sarscov2/genome/genome.fasta', checkIfExists: true)
                ]
                """
            }
        }

        then {
            assertAll(
                { assert process.success },
                { assert snapshot(process.out).match() }
            )
        }

    }

    test("sarscov2 - vcf - stub") {

        options "-stub"
        config "./vcf.config"
        when {
            process {
                """
                input[0] = BCFTOOLS_MPILEUP1.out.vcf.combine(BCFTOOLS_MPILEUP2.out.vcf.map{it[1]})
                input[1] = BEDTOOLS_MAKEWINDOWS.out.bed
                input[2] = [ [ id:'sarscov2' ],
                    file(params.modules_testdata_base_path + 'genomics/sarscov2/genome/genome.fasta', checkIfExists: true)
                ]
                """
            }
        }

        then {
            assertAll(
                { assert process.success },
                { assert snapshot(process.out).match() }
            )
        }

    }

}
