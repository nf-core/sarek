nextflow_process {

    name "Test Process MSISENSOR2_MSI"

    script "../main.nf"
    process "MSISENSOR2_MSI"

    tag "modules"
    tag "modules_nfcore"
    tag "msisensor2"
    tag "msisensor2/msi"
    tag "untar"

    test("homo_sapiens tumor_only - bam - models") {

        setup {
            run("UNTAR") {
                script "../../../untar/main.nf"
                process {
                """
                input[0] = [
                            [ id:'models_hg19_17sites' ], // meta map
                            file(params.modules_testdata_base_path + 'genomics/homo_sapiens/msisensor2/models_hg19_17sites.tar.gz', checkIfExists: true)
                ]
                """
                }
            }
        }

        when {
            process {
                """
                input[0] = [
                    [id:'test'],
                    file(params.modules_testdata_base_path + 'genomics/homo_sapiens/illumina/bam/test_msisensor2.hg19.bam',checkIfExists:true),
                    file(params.modules_testdata_base_path + 'genomics/homo_sapiens/illumina/bam/test_msisensor2.hg19.bam.bai',checkIfExists:true),
                    ]
                input[1] = UNTAR.out.untar
                
                """
            }
        }
        then {
            assert process.success
            assertAll(
                { assert snapshot(
                    process.out.msi,
                    process.out.distribution,
                    file(process.out.somatic[0][1]).name, // Empty file
                    process.out.versions,
                    path(process.out.versions[0]).yaml
                ).match() }
            )
        }
    }

    test("homo_sapiens tumor_only - bam - stub") {

        options "-stub"

        when {
            process {
                """
                input[0] = [
                    [id:'test'],
                    file(params.modules_testdata_base_path + 'genomics/homo_sapiens/illumina/bam/test.paired_end.sorted.bam', checkIfExists:true),
                    file(params.modules_testdata_base_path + 'genomics/homo_sapiens/illumina/bam/test.paired_end.sorted.bam.bai', checkIfExists:true),
                ]
                input[1] = [[:], []]
                """
            }
        }
        then {
            assert process.success
            assertAll(
                { assert snapshot(
                    process.out,
                    path(process.out.versions[0]).yaml
                ).match() }
            )
        }
    }
}
