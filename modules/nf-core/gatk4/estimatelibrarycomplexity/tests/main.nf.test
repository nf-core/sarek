nextflow_process {

    name "Test Process GATK4_ESTIMATELIBRARYCOMPLEXITY"
    script "../main.nf"
    process "GATK4_ESTIMATELIBRARYCOMPLEXITY"

    tag "modules"
    tag "modules_nfcore"
    tag "gatk4"
    tag "gatk4/estimatelibrarycomplexity"

    test("homo_sapiens - bam") {

        when {
            process {
                """
                // [ meta, input ]
                input[0] = [
                    [ id:'test', single_end:false ], // meta map
                    file(params.modules_testdata_base_path + 'genomics/homo_sapiens/illumina/bam/test.paired_end.recalibrated.sorted.bam', checkIfExists: true)
                ]
                // fasta
                input[1] = []
                // fai
                input[2] = []
                // dict
                input[3] = file(params.modules_testdata_base_path + 'genomics/homo_sapiens/genome/genome.dict' , checkIfExists: true)
                """
            }
        }

        then {
            assertAll(
                { assert process.success },
                { assert snapshot(
                            file(process.out.metrics[0][1]).name,
                            process.out.versions
                        ).match()
                }
            )
        }

    }

    test("homo_sapiens - cram") {

        when {
            process {
                """
                // [ meta, input ]
                input[0] = [
                    [ id:'test', single_end:false ], // meta map
                    file(params.modules_testdata_base_path + 'genomics/homo_sapiens/illumina/cram/test.paired_end.recalibrated.sorted.cram', checkIfExists: true)
                ]
                // fasta
                input[1] = file(params.modules_testdata_base_path + 'genomics/homo_sapiens/genome/chr21/sequence/genome.fasta' , checkIfExists: true)
                // fai
                input[2] = file(params.modules_testdata_base_path + 'genomics/homo_sapiens/genome/chr21/sequence/genome.fasta.fai' , checkIfExists: true)
                // dict
                input[3] = file(params.modules_testdata_base_path + 'genomics/homo_sapiens/genome/chr21/sequence/genome.dict' , checkIfExists: true)
                """
            }
        }

        then {
            assertAll(
                { assert process.success },
                { assert snapshot(
                            file(process.out.metrics[0][1]).name,
                            process.out.versions
                        ).match()
                }
            )
        }

    }

    test("sarscov2 - bam - stub") {

        options "-stub"

        when {
            process {
                """
                // [ meta, input ]
                input[0] = [
                    [ id:'test', single_end:false ], // meta map
                    file(params.modules_testdata_base_path + 'genomics/homo_sapiens/illumina/bam/test.paired_end.recalibrated.sorted.bam', checkIfExists: true)
                ]
                // fasta
                input[1] = []
                // fai
                input[2] = []
                // dict
                input[3] = file(params.modules_testdata_base_path + 'genomics/homo_sapiens/genome/genome.dict' , checkIfExists: true)
                """
            }
        }

        then {
            assertAll(
                { assert process.success },
                { assert snapshot(
                            file(process.out.metrics[0][1]).name,
                            process.out.versions
                        ).match()
                }
            )
        }

    }

}
