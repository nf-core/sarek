nextflow_process {

    name "Test Process GATK4_GENOTYPEGVCFS"
    script "../main.nf"
    process "GATK4_GENOTYPEGVCFS"

    tag "modules"
    tag "modules_nfcore"
    tag "gatk4"
    tag "gatk4/genotypegvcfs"
    tag "untar"

    setup {
        run("UNTAR") {
            script "../../../untar/main.nf"
            process {
                """
                input[0] = [
                    [id:"test"],
                    file(params.modules_testdata_base_path + 'genomics/homo_sapiens/illumina/gatk/test_genomicsdb.tar.gz', checkIfExists: true)
                ]
                """
            }
        }
    }

    test("homo_sapiens - [gvcf, idx, [], []], fasta, fai, dict, [], []") {

        when {
            process {
                """
                input[0] = [
                    [id:"test"],
                    file(params.modules_testdata_base_path + 'genomics/homo_sapiens/illumina/gvcf/test.genome.vcf', checkIfExists: true),
                    file(params.modules_testdata_base_path + 'genomics/homo_sapiens/illumina/gvcf/test.genome.vcf.idx', checkIfExists: true),
                    [],
                    []
                ]
                input[1] = [
                    [id:"fasta"],
                    file(params.modules_testdata_base_path + 'genomics/homo_sapiens/genome/genome.fasta', checkIfExists:true)
                ]
                input[2] = [
                    [id:"fai"],
                    file(params.modules_testdata_base_path + 'genomics/homo_sapiens/genome/genome.fasta.fai', checkIfExists:true)
                ]
                input[3] = [
                    [id:"dict"],
                    file(params.modules_testdata_base_path + 'genomics/homo_sapiens/genome/genome.dict', checkIfExists:true)
                ]
                input[4] = [[],[]]
                input[5] = [[],[]]
                """
            }
        }

        then {
            assertAll(
                { assert process.success },
                { assert snapshot(
                    process.out.vcf.collect { [it[0], path(it[1]).vcf.variantsMD5] },
                    process.out.tbi.collect { [it[0], file(it[1]).name] },
                    process.out.versions
                ).match() }
            )
        }

    }

    test("homo_sapiens - [gvcf_gz, tbi, [], []], fasta, fai, dict, dbsnp, dbsnp_tbi") {

        when {
            process {
                """
                input[0] = [
                    [id:"test"],
                    file(params.modules_testdata_base_path + 'genomics/homo_sapiens/illumina/gvcf/test.genome.vcf.gz', checkIfExists: true),
                    file(params.modules_testdata_base_path + 'genomics/homo_sapiens/illumina/gvcf/test.genome.vcf.gz.tbi', checkIfExists: true),
                    [],
                    []
                ]
                input[1] = [
                    [id:"fasta"],
                    file(params.modules_testdata_base_path + 'genomics/homo_sapiens/genome/genome.fasta', checkIfExists:true)
                ]
                input[2] = [
                    [id:"fai"],
                    file(params.modules_testdata_base_path + 'genomics/homo_sapiens/genome/genome.fasta.fai', checkIfExists:true)
                ]
                input[3] = [
                    [id:"dict"],
                    file(params.modules_testdata_base_path + 'genomics/homo_sapiens/genome/genome.dict', checkIfExists:true)
                ]
                input[4] = [
                    [id:"dbsnp"],
                    file(params.modules_testdata_base_path + 'genomics/homo_sapiens/genome/vcf/dbsnp_146.hg38.vcf.gz', checkIfExists:true)
                ]
                input[5] = [
                    [id:"dbsnp"],
                    file(params.modules_testdata_base_path + 'genomics/homo_sapiens/genome/vcf/dbsnp_146.hg38.vcf.gz.tbi', checkIfExists:true)
                ]
                """
            }
        }

        then {
            assertAll(
                { assert process.success },
                { assert snapshot(
                    process.out.vcf.collect { [it[0], path(it[1]).vcf.variantsMD5] },
                    process.out.tbi.collect { [it[0], file(it[1]).name] },
                    process.out.versions
                ).match() }
            )
        }

    }

    test("homo_sapiens - [gvcf_gz, tbi, bed, []], fasta, fai, dict, [], []") {

        when {
            process {
                """
                input[0] = [
                    [id:"test"],
                    file(params.modules_testdata_base_path + 'genomics/homo_sapiens/illumina/gvcf/test.genome.vcf.gz', checkIfExists: true),
                    file(params.modules_testdata_base_path + 'genomics/homo_sapiens/illumina/gvcf/test.genome.vcf.gz.tbi', checkIfExists: true),
                    file(params.modules_testdata_base_path + 'genomics/homo_sapiens/genome/genome.bed', checkIfExists:true),
                    []
                ]
                input[1] = [
                    [id:"fasta"],
                    file(params.modules_testdata_base_path + 'genomics/homo_sapiens/genome/genome.fasta', checkIfExists:true)
                ]
                input[2] = [
                    [id:"fai"],
                    file(params.modules_testdata_base_path + 'genomics/homo_sapiens/genome/genome.fasta.fai', checkIfExists:true)
                ]
                input[3] = [
                    [id:"dict"],
                    file(params.modules_testdata_base_path + 'genomics/homo_sapiens/genome/genome.dict', checkIfExists:true)
                ]
                input[4] = [[],[]]
                input[5] = [[],[]]
                """
            }
        }

        then {
            assertAll(
                { assert process.success },
                { assert snapshot(
                    process.out.vcf.collect { [it[0], path(it[1]).vcf.variantsMD5] },
                    process.out.tbi.collect { [it[0], file(it[1]).name] },
                    process.out.versions
                ).match() }
            )
        }

    }

    test("homo_sapiens - [gendb, [], [], []], fasta, fai, dict, [], []") {

        when {
            process {
                """
                input[0] = UNTAR.out.untar.map { meta, gendb -> [ meta, gendb, [], [], []] }
                input[1] = [
                    [id:"fasta"],
                    file(params.modules_testdata_base_path + 'genomics/homo_sapiens/genome/genome.fasta', checkIfExists:true)
                ]
                input[2] = [
                    [id:"fai"],
                    file(params.modules_testdata_base_path + 'genomics/homo_sapiens/genome/genome.fasta.fai', checkIfExists:true)
                ]
                input[3] = [
                    [id:"dict"],
                    file(params.modules_testdata_base_path + 'genomics/homo_sapiens/genome/genome.dict', checkIfExists:true)
                ]
                input[4] = [[],[]]
                input[5] = [[],[]]
                """
            }
        }

        then {
            assertAll(
                { assert process.success },
                { assert snapshot(
                    process.out.vcf.collect { [it[0], path(it[1]).vcf.variantsMD5] },
                    process.out.tbi.collect { [it[0], file(it[1]).name] },
                    process.out.versions
                ).match() }
            )
        }

    }

    test("homo_sapiens - [gendb, bed, [], []], fasta, fai, dict, [], []") {

        when {
            process {
                """
                input[0] = UNTAR.out.untar.map { meta, gendb -> 
                    [ 
                        meta,
                        gendb,
                        [],
                        file(params.modules_testdata_base_path + 'genomics/homo_sapiens/genome/genome.bed', checkIfExists:true),
                        []
                    ] 
                }
                input[1] = [
                    [id:"fasta"],
                    file(params.modules_testdata_base_path + 'genomics/homo_sapiens/genome/genome.fasta', checkIfExists:true)
                ]
                input[2] = [
                    [id:"fai"],
                    file(params.modules_testdata_base_path + 'genomics/homo_sapiens/genome/genome.fasta.fai', checkIfExists:true)
                ]
                input[3] = [
                    [id:"dict"],
                    file(params.modules_testdata_base_path + 'genomics/homo_sapiens/genome/genome.dict', checkIfExists:true)
                ]
                input[4] = [[],[]]
                input[5] = [[],[]]
                """
            }
        }

        then {
            assertAll(
                { assert process.success },
                { assert snapshot(
                    process.out.vcf.collect { [it[0], path(it[1]).vcf.variantsMD5] },
                    process.out.tbi.collect { [it[0], file(it[1]).name] },
                    process.out.versions
                ).match() }
            )
        }

    }

    test("homo_sapiens - [gvcf, idx, [], []], fasta, fai, dict, [], [] - stub") {

        options "-stub"

        when {
            process {
                """
                input[0] = [
                    [id:"test"],
                    file(params.modules_testdata_base_path + 'genomics/homo_sapiens/illumina/gvcf/test.genome.vcf', checkIfExists: true),
                    file(params.modules_testdata_base_path + 'genomics/homo_sapiens/illumina/gvcf/test.genome.vcf.idx', checkIfExists: true),
                    [],
                    []
                ]
                input[1] = [
                    [id:"fasta"],
                    file(params.modules_testdata_base_path + 'genomics/homo_sapiens/genome/genome.fasta', checkIfExists:true)
                ]
                input[2] = [
                    [id:"fai"],
                    file(params.modules_testdata_base_path + 'genomics/homo_sapiens/genome/genome.fasta.fai', checkIfExists:true)
                ]
                input[3] = [
                    [id:"dict"],
                    file(params.modules_testdata_base_path + 'genomics/homo_sapiens/genome/genome.dict', checkIfExists:true)
                ]
                input[4] = [[],[]]
                input[5] = [[],[]]
                """
            }
        }

        then {
            assertAll(
                { assert process.success },
                { assert snapshot(process.out).match() }
            )
        }

    }

}
