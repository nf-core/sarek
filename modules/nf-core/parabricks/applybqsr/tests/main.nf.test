nextflow_process {

    name "Test Process PARABRICKS_APPLYBQSR"
    script "../main.nf"
    process "PARABRICKS_APPLYBQSR"

    tag "modules"
    tag "modules_nfcore"
    tag "parabricks"
    tag "parabricks/applybqsr"
    tag "gpu"

    test("sarscov2 | paired-end | [bam]") {

        when {
            process {
                """
                input[0] = [
                    [ id:'test'],
                    file(params.modules_testdata_base_path + 'genomics/sarscov2/illumina/bam/test.paired_end.sorted.bam', checkIfExists: true)
                ]
                input[1] = [
                    [], []  // index not needed unless using intervals
                ]
                input[2] = [
                    [ id:'bqsr_table'],
                    file(params.modules_testdata_base_path + 'genomics/sarscov2/illumina/gatk/test.baserecalibrator.table', checkIfExists: true)
                ]
                input[3] = [
                    [], []  // no intervals
                ]
                input[4] = [
                    [ id:'reference'],
                    file(params.modules_testdata_base_path + 'genomics/sarscov2/genome/genome.fasta', checkIfExists: true)
                ]
                """
            }
        }

        then {
            assertAll(
                { assert process.success },
                { assert snapshot(
                    bam(process.out.bam[0][1]).getReadsMD5(),
                    file(process.out.bai[0][1]).name,
                    process.out.versions
                ).match() }
            )
        }

    }

    test("sarscov2 | paired-end | [bam] | intervals") {

        when {
            process {
                """
                input[0] = [
                    [ id:'test'],
                    file(params.modules_testdata_base_path + 'genomics/sarscov2/illumina/bam/test.paired_end.sorted.bam', checkIfExists: true)
                ]
                input[1] = [
                    [ id:'test-index'],
                    file(params.modules_testdata_base_path + 'genomics/sarscov2/illumina/bam/test.paired_end.sorted.bam.bai', checkIfExists: true)
                ]
                input[2] = [
                    [ id:'bqsr_table'],
                    file(params.modules_testdata_base_path + 'genomics/sarscov2/illumina/gatk/test.baserecalibrator.table', checkIfExists: true)
                ]
                input[3] = [
                    [ id:'intervals'],
                    file(params.modules_testdata_base_path + 'genomics/sarscov2/genome/bed/test.bed', checkIfExists: true)
                ]
                input[4] = [
                    [ id:'reference'],
                    file(params.modules_testdata_base_path + 'genomics/sarscov2/genome/genome.fasta', checkIfExists: true)
                   ]
                """
            }
        }

        then {
            assertAll(
                { assert process.success },
                { assert snapshot(
                    bam(process.out.bam[0][1]).getReadsMD5(),
                    file(process.out.bai[0][1]).name,
                    process.out.versions
                ).match() }
            )
        }
    }

    test("homo_sapiens | paired-end | [cram]") {

        when {
            process {
                """
                input[0] = [
                    [ id:'test'],
                    file(params.modules_testdata_base_path + 'genomics/homo_sapiens/illumina/cram/test.paired_end.sorted.cram', checkIfExists: true)
                ]
                input[1] = [
                    [], []  // index not needed unless using intervals
                ]
                input[2] = [
                    [ id:'bqsr_table'],
                    file(params.modules_testdata_base_path + 'genomics/homo_sapiens/illumina/gatk/test.baserecalibrator.table', checkIfExists: true)
                ]
                input[3] = [
                    [], []  // no intervals
                ]
                input[4] = [
                    [ id:'reference'],
                    file(params.modules_testdata_base_path + 'genomics/homo_sapiens/genome/genome.fasta', checkIfExists: true)
                   ]
                """
            }
        }

        then {
            assertAll(
                { assert process.success },
                { assert snapshot(
                    bam(process.out.bam[0][1]).getReadsMD5(),
                    file(process.out.bai[0][1]).name,
                    process.out.versions
                ).match() }
            )
        }

    }

    test("homo_sapiens | paired-end | [cram] | intervals - stub") {

        options "-stub"

        when {
            process {
                """
                input[0] = [
                    [ id:'test'],
                    file(params.modules_testdata_base_path + 'genomics/homo_sapiens/illumina/cram/test.paired_end.sorted.cram', checkIfExists: true)
                ]
                input[1] = [
                    [ id:'test-index'],
                    file(params.modules_testdata_base_path + 'genomics/homo_sapiens/illumina/cram/test.paired_end.sorted.cram.crai', checkIfExists: true)
                ]
                input[2] = [
                    [ id:'bqsr_table'],
                    file(params.modules_testdata_base_path + 'genomics/homo_sapiens/illumina/gatk/test.baserecalibrator.table', checkIfExists: true)
                ]
                input[3] = [
                    [ id:'intervals'],
                    file(params.modules_testdata_base_path + 'genomics/homo_sapiens/genome/genome.bed', checkIfExists: true)
                ]
                input[4] = [
                    [ id:'reference'],
                    file(params.modules_testdata_base_path + 'genomics/homo_sapiens/genome/genome.fasta', checkIfExists: true)
                   ]
                """
            }
        }

        then {
            assertAll(
                { assert process.success },
                { assert snapshot(process.out).match() }
            )
        }

    }

    test("sarscov2 | paired-end | [bam] | intervals - stub") {

        options "-stub"

        when {
            process {
                """
                input[0] = [
                    [ id:'test'],
                    file(params.modules_testdata_base_path + 'genomics/sarscov2/illumina/bam/test.paired_end.sorted.bam', checkIfExists: true)
                ]
                input[1] = [
                    [ id:'test-index'],
                    file(params.modules_testdata_base_path + 'genomics/sarscov2/illumina/bam/test.paired_end.sorted.bam.bai', checkIfExists: true)
                ]
                input[2] = [
                    [ id:'bqsr_table'],
                    file(params.modules_testdata_base_path + 'genomics/sarscov2/illumina/gatk/test.baserecalibrator.table', checkIfExists: true)
                ]
                input[3] = [
                    [ id:'intervals'],
                    file(params.modules_testdata_base_path + 'genomics/sarscov2/genome/bed/test.bed', checkIfExists: true)
                ]
                input[4] = [
                    [ id:'reference'],
                    file(params.modules_testdata_base_path + 'genomics/sarscov2/genome/genome.fasta', checkIfExists: true)
                   ]
                """
            }
        }

        then {
            assertAll(
                { assert process.success },
                { assert snapshot(process.out).match() }
            )
        }

    }

}