nextflow_process {

    name "Test Process GOLEFT_INDEXCOV"
    script "../main.nf"
    process "GOLEFT_INDEXCOV"

    tag "modules"
    tag "modules_nfcore"
    tag "goleft"
    tag "goleft/indexcov"

    test("sarscov2 - bam") {

        when {
            process {
                """
                input[0] = Channel.of([
                    [ id:'test' ], // meta map
                    [
                        file(params.modules_testdata_base_path + "genomics/sarscov2/illumina/bam/test.single_end.sorted.bam", checkIfExists: true),
                        file(params.modules_testdata_base_path + "genomics/sarscov2/illumina/bam/test.paired_end.sorted.bam", checkIfExists: true)
                    ],
                    [
                        file(params.modules_testdata_base_path + "genomics/sarscov2/illumina/bam/test.single_end.sorted.bam.bai", checkIfExists: true),
                        file(params.modules_testdata_base_path + "genomics/sarscov2/illumina/bam/test.paired_end.sorted.bam.bai", checkIfExists: true)
                    ],
                ])

                input[1] = Channel.of(
                    [
                        [:],
                        file(params.modules_testdata_base_path + "genomics/sarscov2/genome/genome.fasta.fai", checkIfExists: true)
                    ]
                )
                """
            }
        }

        then {
            assertAll(
                { assert process.success },
                { assert snapshot(
                    process.out.ped,
                    process.out.bed,
                    file(process.out.bed_index[0][1]).name,
                    process.out.roc,
                    process.out.html,
                    process.out.png,
                    process.out.versions
                    ).match() }
            )
        }

    }


    test("sarscov2 - crai") {

        when {
            process {
                """
                input[0] = Channel.of([
                    [ id:'test' ], // meta map
                    [
                        file(params.modules_testdata_base_path + "genomics/homo_sapiens/illumina/cram/test.paired_end.sorted.cram", checkIfExists: true),
                        file(params.modules_testdata_base_path + "genomics/homo_sapiens/illumina/cram/test.paired_end.recalibrated.sorted.cram", checkIfExists: true)
                    ],
                    [
                        file(params.modules_testdata_base_path + "genomics/homo_sapiens/illumina/cram/test.paired_end.markduplicates.sorted.cram.crai", checkIfExists: true),
                        file(params.modules_testdata_base_path + "genomics/homo_sapiens/illumina/cram/test.paired_end.recalibrated.sorted.cram.crai", checkIfExists: true)
                    ]
                ])

                input[1] = Channel.of(
                    [
                        [:],
                        file(params.modules_testdata_base_path + "genomics/homo_sapiens/genome/chr21/sequence/genome.fasta.fai", checkIfExists: true)
                    ]
                )
                """
            }
        }

        then {
            assertAll(
                { assert process.success },
                { assert snapshot(
                    process.out.ped,
                    process.out.bed,
                    file(process.out.bed_index[0][1]).name,
                    process.out.roc,
                    process.out.html,
                    process.out.png,
                    process.out.versions
                    ).match() }
            )
        }

    }

    test("sarscov2 - stub") {

        options "-stub"

        when {
            process {
                """
                input[0] = Channel.of([
                    [ id:'test' ], // meta map
                    [],
                    []
                ])

                input[1] = Channel.of([
                    [:],
                    []
                ])
                """
            }
        }

        then {
            assertAll(
                { assert process.success },
                { assert snapshot(process.out).match() }
            )
        }

    }

}
