nextflow_process {

    name "Test Process TIDDIT_SV"
    script "../main.nf"
    process "TIDDIT_SV"

    tag "modules"
    tag "modules_nfcore"
    tag "tiddit"
    tag "tiddit/sv"
    tag "bwa/index"

    test("sarscov2 - bam - bwa") {

        setup {

            run("BWA_INDEX") {
                script "../../../../nf-core/bwa/index/main.nf"
                process {
                    """
                    input[0] =  [ [id: 'test'],
                                file(params.modules_testdata_base_path + 'genomics/sarscov2/genome/genome.fasta', checkIfExists: true)
                            ]
                    """
                }
            }
        }

        when {
            process {
                """
                input[0] = [ [ id:'test' ], // meta map
                            file(params.modules_testdata_base_path + 'genomics/sarscov2/illumina/bam/test.paired_end.sorted.bam', checkIfExists: true),
                            file(params.modules_testdata_base_path + 'genomics/sarscov2/illumina/bam/test.paired_end.sorted.bam.bai', checkIfExists: true)
                        ]
                // fasta
                input[1] = [ [id: 'test'],
                            file(params.modules_testdata_base_path + 'genomics/sarscov2/genome/genome.fasta', checkIfExists: true)
                        ]
                // bwa_index
                input[2] = BWA_INDEX.out.index
                """
            }
        }

        then {
            assertAll(
                { assert process.success },
                { assert path(process.out.vcf.get(0).get(1)).readLines().contains("##fileformat=VCFv4.1") },
                { assert path(process.out.ploidy.get(0).get(1)).readLines().contains("Chromosome	Ploidy	Ploidy_rounded	Mean_coverage") },
                { assert snapshot(process.out.versions).match("bam_bwa_version") }
            )
        }

    }

    test("sarscov2 - bam - no_bwa") {

    config "./nextflow.config"

        when {
            process {
                """
                input[0] = [ [ id:'test' ], // meta map
                            file(params.modules_testdata_base_path + 'genomics/sarscov2/illumina/bam/test.paired_end.sorted.bam', checkIfExists: true),
                            file(params.modules_testdata_base_path + 'genomics/sarscov2/illumina/bam/test.paired_end.sorted.bam.bai', checkIfExists: true)
                        ]
                // fasta
                input[1] = [ [id: 'test'],
                            file(params.modules_testdata_base_path + 'genomics/sarscov2/genome/genome.fasta', checkIfExists: true)
                        ]
                // bwa_index
                input[2] = [ [], [] ]
                """
            }
        }

        then {
            assertAll(
                { assert process.success },
                { assert path(process.out.vcf.get(0).get(1)).readLines().contains("##fileformat=VCFv4.1") },
                { assert path(process.out.ploidy.get(0).get(1)).readLines().contains("Chromosome	Ploidy	Ploidy_rounded	Mean_coverage") },
                { assert snapshot(process.out.versions).match("bam_version") }
            )
        }

    }

    test("human - cram - bwa") {

        setup {

            run("BWA_INDEX") {
                script "../../../../nf-core/bwa/index/main.nf"
                process {
                    """
                    input[0] =  [ [id: 'test'],
                                file(params.modules_testdata_base_path + 'genomics/homo_sapiens/genome/genome.fasta', checkIfExists: true)
                            ]
                    """
                }
            }
        }

        when {
            process {
                """
                input[0] = [ [ id:'test' ], // meta map
                            file(params.modules_testdata_base_path + 'genomics/homo_sapiens/illumina/cram/test.paired_end.sorted.cram', checkIfExists: true),
                            file(params.modules_testdata_base_path + 'genomics/homo_sapiens/illumina/cram/test.paired_end.sorted.cram.crai', checkIfExists: true)
                        ]
                // fasta
                input[1] = [ [id: 'test'],
                            file(params.modules_testdata_base_path + 'genomics/homo_sapiens/genome/genome.fasta', checkIfExists: true)
                        ]
                // bwa_index
                input[2] = BWA_INDEX.out.index
                """
            }
        }

        then {
            assertAll(
                { assert process.success },
                { assert path(process.out.vcf.get(0).get(1)).readLines().contains("##fileformat=VCFv4.1") },
                { assert path(process.out.ploidy.get(0).get(1)).readLines().contains("Chromosome	Ploidy	Ploidy_rounded	Mean_coverage") },
                { assert snapshot(process.out.versions).match("cram_bwa_version") })
        }

    }

    test("human - cram - no_bwa") {

    config "./nextflow.config"

        when {
            process {
                """
                input[0] = [ [ id:'test' ], // meta map
                            file(params.modules_testdata_base_path + 'genomics/homo_sapiens/illumina/cram/test.paired_end.sorted.cram', checkIfExists: true),
                            file(params.modules_testdata_base_path + 'genomics/homo_sapiens/illumina/cram/test.paired_end.sorted.cram.crai', checkIfExists: true)
                        ]
                // fasta
                input[1] = [ [id: 'test'],
                            file(params.modules_testdata_base_path + 'genomics/homo_sapiens/genome/genome.fasta', checkIfExists: true)
                        ]
                // bwa_index
                input[2] = [ [], [] ]
                """
            }
        }

        then {
            assertAll(
                { assert process.success },
                { assert path(process.out.vcf.get(0).get(1)).readLines().contains("##fileformat=VCFv4.1") },
                { assert path(process.out.ploidy.get(0).get(1)).readLines().contains("Chromosome	Ploidy	Ploidy_rounded	Mean_coverage") },
                { assert snapshot(process.out.versions).match("cram_version") })
        }

    }

    test("sarscov2 - bam - stub") {

        options "-stub"

        when {
            process {
                """
                input[0] = [ [ id:'test' ], // meta map
                            file(params.modules_testdata_base_path + 'genomics/sarscov2/illumina/bam/test.paired_end.sorted.bam', checkIfExists: true),
                            file(params.modules_testdata_base_path + 'genomics/sarscov2/illumina/bam/test.paired_end.sorted.bam.bai', checkIfExists: true)
                        ]
                // fasta
                input[1] = [ [id: 'test'],
                            file(params.modules_testdata_base_path + 'genomics/sarscov2/genome/genome.fasta', checkIfExists: true)
                        ]
                // bwa_index
                input[2] = [ [], [] ]
                """
            }
        }

        then {
            assertAll(
                { assert process.success },
                { assert snapshot(process.out).match() }
            )
        }

    }

}
