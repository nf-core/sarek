nextflow_process {

    name "Test Process SAMTOOLS_INDEX"
    script "../main.nf"
    process "SAMTOOLS_INDEX"
    tag "modules"
    tag "modules_nfcore"
    tag "samtools"
    tag "samtools/index"

    test("bai") {
        when {
            process {
                """
                input[0] = Channel.of([
                    [ id:'test', single_end:false ], // meta map
                    file(params.modules_testdata_base_path + 'genomics/sarscov2/illumina/bam/test.paired_end.sorted.bam', checkIfExists: true)
                ])
                """
            }
        }

        then {
            assertAll (
                { assert process.success },
                { assert snapshot(process.out).match() }
            )
        }
    }

    test("crai") {
        when {
            process {
                """
                input[0] = Channel.of([
                    [ id:'test', single_end:false ], // meta map
                    file(params.modules_testdata_base_path + 'genomics/homo_sapiens/illumina/cram/test.paired_end.recalibrated.sorted.cram', checkIfExists: true)
                ])
                """
            }
        }

        then {
            assertAll (
                { assert process.success },
                { assert snapshot(process.out).match() }
            )
        }
    }

    test("csi") {
        config "./csi.nextflow.config"

        when {
            process {
                """
                input[0] = Channel.of([
                    [ id:'test', single_end:false ], // meta map
                    file(params.modules_testdata_base_path + 'genomics/sarscov2/illumina/bam/test.paired_end.sorted.bam', checkIfExists: true)
                ])
                """
            }
        }

        then {
            assertAll (
                { assert process.success },
                { assert snapshot(
                    file(process.out.csi[0][1]).name,
                    process.out.versions
                ).match() }
            )
        }
    }

    test("bai - stub") {
        options "-stub"
        when {
            process {
                """
                input[0] = Channel.of([
                    [ id:'test', single_end:false ], // meta map
                    file(params.modules_testdata_base_path + 'genomics/sarscov2/illumina/bam/test.paired_end.sorted.bam', checkIfExists: true)
                ])
                """
            }
        }

        then {
            assertAll (
                { assert process.success },
                { assert snapshot(process.out).match() }
            )
        }
    }

    test("crai - stub") {
        options "-stub"
        when {
            process {
                """
                input[0] = Channel.of([
                    [ id:'test', single_end:false ], // meta map
                    file(params.modules_testdata_base_path + 'genomics/homo_sapiens/illumina/cram/test.paired_end.recalibrated.sorted.cram', checkIfExists: true)
                ])
                """
            }
        }

        then {
            assertAll (
                { assert process.success },
                { assert snapshot(process.out).match() }
            )
        }
    }

    test("csi - stub") {
        options "-stub"
        config "./csi.nextflow.config"

        when {
            process {
                """
                input[0] = Channel.of([
                    [ id:'test', single_end:false ], // meta map
                    file(params.modules_testdata_base_path + 'genomics/sarscov2/illumina/bam/test.paired_end.sorted.bam', checkIfExists: true)
                ])
                """
            }
        }

        then {
            assertAll (
                { assert process.success },
                { assert snapshot(process.out).match() }
            )
        }
    }
}
