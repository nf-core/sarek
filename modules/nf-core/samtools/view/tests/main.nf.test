nextflow_process {

    name "Test Process SAMTOOLS_VIEW"
    script "../main.nf"
    process "SAMTOOLS_VIEW"

    tag "modules"
    tag "modules_nfcore"
    tag "samtools"
    tag "samtools/view"

    test("bam") {

        when {
            process {
                """
                input[0] = Channel.of([
                    [ id:'test', single_end:false ], // meta map
                    file(params.modules_testdata_base_path + 'genomics/sarscov2/illumina/bam/test.paired_end.bam', checkIfExists: true),
                    []
                ])
                input[1] = [[],[]]
                input[2] = []
                """
            }
        }

        then {
            assertAll(
                { assert process.success },
                { assert snapshot(file(process.out.bam[0][1]).name).match("bam_bam") },
                { assert snapshot(process.out.bai).match("bam_bai") },
                { assert snapshot(process.out.crai).match("bam_crai") },
                { assert snapshot(process.out.cram).match("bam_cram") },
                { assert snapshot(process.out.csi).match("bam_csi") },
                { assert snapshot(process.out.sam).match("bam_sam") },
                { assert snapshot(process.out.versions).match("bam_versions") }
            )
        }
    }

    test("cram") {

        when {
            process {
                """
                input[0] = Channel.of([
                    [ id:'test', single_end:false ], // meta map
                    file(params.modules_testdata_base_path + 'genomics/homo_sapiens/illumina/cram/test.paired_end.sorted.cram', checkIfExists: true),
                    file(params.modules_testdata_base_path + 'genomics/homo_sapiens/illumina/cram/test.paired_end.sorted.cram.crai', checkIfExists: true)
                ])
                input[1] = Channel.of([
                    [ id:'genome' ], // meta map
                    file(params.modules_testdata_base_path + 'genomics/homo_sapiens/genome/genome.fasta', checkIfExists: true)
                ])
                input[2] = []
                """
            }
        }

        then {
            assertAll(
                { assert process.success },
                { assert snapshot(file(process.out.cram[0][1]).name).match("cram_cram") },
                { assert snapshot(process.out.bai).match("cram_bai") },
                { assert snapshot(process.out.bam).match("cram_bam") },
                { assert snapshot(process.out.crai).match("cram_crai") },
                { assert snapshot(process.out.csi).match("cram_csi") },
                { assert snapshot(process.out.sam).match("cram_sam") },
                { assert snapshot(process.out.versions).match("cram_versions") }
            )
        }
    }

    test("cram_to_bam") {

        config "./bam.config"

        when {
            process {
                """
                input[0] = Channel.of([
                    [ id:'test', single_end:false ], // meta map
                    file(params.modules_testdata_base_path + 'genomics/homo_sapiens/illumina/cram/test.paired_end.sorted.cram', checkIfExists: true),
                    []
                ])
                input[1] = Channel.of([
                    [ id:'genome' ], // meta map
                    file(params.modules_testdata_base_path + 'genomics/homo_sapiens/genome/genome.fasta', checkIfExists: true)
                ])
                input[2] = []
                """
            }
        }

        then {
            assertAll(
                { assert process.success },
                { assert snapshot(file(process.out.bam[0][1]).name).match("cram_to_bam_bam") },
                { assert snapshot(process.out.bai).match("cram_to_bam_bai") },
                { assert snapshot(process.out.crai).match("cram_to_bam_crai") },
                { assert snapshot(process.out.cram).match("cram_to_bam_cram") },
                { assert snapshot(process.out.csi).match("cram_to_bam_csi") },
                { assert snapshot(process.out.sam).match("cram_to_bam_sam") },
                { assert snapshot(process.out.versions).match("cram_to_bam_versions") }
            )
        }
    }

    test("cram_to_bam_index") {

        config "./bam_index.config"

        when {
            process {
                """
                input[0] = Channel.of([
                    [ id:'test', single_end:false ], // meta map
                    file(params.modules_testdata_base_path + 'genomics/homo_sapiens/illumina/cram/test.paired_end.sorted.cram', checkIfExists: true),
                    []
                ])
                input[1] = Channel.of([
                    [ id:'genome' ], // meta map
                    file(params.modules_testdata_base_path + 'genomics/homo_sapiens/genome/genome.fasta', checkIfExists: true)
                ])
                input[2] = []
                """
            }
        }

        then {
            assertAll(
                { assert process.success },
                { assert snapshot(file(process.out.bam[0][1]).name).match("cram_to_bam_index_bam") },
                { assert snapshot(file(process.out.csi[0][1]).name).match("cram_to_bam_index_csi") },
                { assert snapshot(process.out.bai).match("cram_to_bam_index_bai") },
                { assert snapshot(process.out.crai).match("cram_to_bam_index_crai") },
                { assert snapshot(process.out.cram).match("cram_to_bam_index_cram") },
                { assert snapshot(process.out.sam).match("cram_to_bam_index_sam") },
                { assert snapshot(process.out.versions).match("cram_to_bam_index_versions") }
            )
        }
    }

    test("cram_to_bam_index_qname") {

        config "./bam_index.config"

        when {
            process {
                """
                input[0] = Channel.of([
                    [ id:'test', single_end:false ], // meta map
                    file(params.modules_testdata_base_path + 'genomics/homo_sapiens/illumina/cram/test.paired_end.sorted.cram', checkIfExists: true),
                    []
                ])
                input[1] = Channel.of([
                    [ id:'genome' ], // meta map
                    file(params.modules_testdata_base_path + 'genomics/homo_sapiens/genome/genome.fasta', checkIfExists: true)
                ])
                input[2] = Channel.of("testN:2817", "testN:2814").collectFile(name: "readnames.list", newLine: true)
                """
            }
        }

        then {
            assertAll(
                { assert process.success },
                { assert snapshot(file(process.out.bam[0][1]).name).match("cram_to_bam_index_qname_bam") },
                { assert snapshot(file(process.out.csi[0][1]).name).match("cram_to_bam_index_qname_csi") },
                { assert snapshot(process.out.bai).match("cram_to_bam_index_qname_bai") },
                { assert snapshot(process.out.crai).match("cram_to_bam_index_qname_crai") },
                { assert snapshot(process.out.cram).match("cram_to_bam_index_qname_cram") },
                { assert snapshot(process.out.sam).match("cram_to_bam_index_qname_sam") },
                { assert snapshot(file(process.out.unselected[0][1]).name).match("cram_to_bam_index_qname_unselected") },
                { assert snapshot(file(process.out.unselected_index[0][1]).name).match("cram_to_bam_index_qname_unselected_csi") },
                { assert snapshot(process.out.versions).match("cram_to_bam_index_qname_versions") }
            )
        }
    }

    test("bam_stub") {

        options "-stub"
        config "./bam_index.config"

        when {
            process {
                """
                input[0] = Channel.of([
                    [ id:'test', single_end:false ], // meta map
                    file(params.modules_testdata_base_path + 'genomics/sarscov2/illumina/bam/test.paired_end.bam', checkIfExists: true),
                    []
                ])
                input[1] = [[],[]]
                input[2] = []
                """
            }
        }

        then {
            assertAll(
                { assert process.success },
                { assert snapshot(file(process.out.bam[0][1]).name).match("bam_stub_bam") },
                { assert snapshot(file(process.out.csi[0][1]).name).match("bam_stub_csi") },
                { assert snapshot(process.out.bai).match("bam_stub_bai") },
                { assert snapshot(process.out.crai).match("bam_stub_crai") },
                { assert snapshot(process.out.cram).match("bam_stub_cram") },
                { assert snapshot(process.out.sam).match("bam_stub_sam") },
                { assert snapshot(process.out.versions).match("bam_stub_versions") }
            )
        }
    }
}
