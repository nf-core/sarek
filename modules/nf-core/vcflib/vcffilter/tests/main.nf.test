
nextflow_process {

    name "Test Process VCFLIB_VCFFILTER"
    script "../main.nf"
    process "VCFLIB_VCFFILTER"
    config "./nextflow.config"

    tag "modules"
    tag "modules_nfcore"
    tag "vcflib"
    tag "vcflib/vcffilter"

    test("test-vcflib-vcffilter") {

        when {
            params {
                module_args = '-f "DP > 4"'
            }
            process {
                """
                input[0] = [
                    [ id:'test' ],
                    file(params.modules_testdata_base_path + 'genomics/sarscov2/illumina/vcf/test.vcf.gz', checkIfExists: true),
                    file(params.modules_testdata_base_path + 'genomics/sarscov2/illumina/vcf/test.vcf.gz.tbi', checkIfExists: true)
                ]
                """
            }
        }

        then {
            assertAll(
                { assert process.success },
                { assert snapshot(
                    path(process.out.vcf[0][1]).vcf.variantsMD5,
                    process.out.versions,
                    path(process.out.versions[0]).yaml
                ).match()}
            )
        }
    }

    test("test-vcflib-vcffilter-stub") {

        options "-stub"

        when {
            params {
                module_args = ''
            }
            process {
                """
                input[0] = [
                    [ id:'test' ],
                    file(params.modules_testdata_base_path + 'genomics/sarscov2/illumina/vcf/test.vcf.gz', checkIfExists: true),
                    file(params.modules_testdata_base_path + 'genomics/sarscov2/illumina/vcf/test.vcf.gz.tbi', checkIfExists: true)
                ]
                """
            }
        }

        then {
            assertAll(
                { assert process.success },
                { assert snapshot(
                    process.out,
                    path(process.out.versions[0]).yaml
                ).match() }
            )
        }
    }
}
