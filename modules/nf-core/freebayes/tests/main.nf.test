nextflow_process {

    name "Test Process FREEBAYES"
    script "../main.nf"
    process "FREEBAYES"

    tag "modules"
    tag "modules_nfcore"
    tag "freebayes"

    test("sarscov2 - [ bam, bai ] - fasta - fai") {

        when {
            process {
                """
                input[0] = [
                    [ id:'test', single_end:false ], // meta map
                    file(params.modules_testdata_base_path + 'genomics/sarscov2/illumina/bam/test.paired_end.sorted.bam', checkIfExists: true),
                    file(params.modules_testdata_base_path + 'genomics/sarscov2/illumina/bam/test.paired_end.sorted.bam.bai', checkIfExists: true),
                    [],
                    [],
                    []
                ]
                input[1] = [ [ id: 'test_fasta' ], file(params.modules_testdata_base_path + 'genomics/sarscov2/genome/genome.fasta', checkIfExists: true) ]
                input[2] = [ [ id: 'test_fai' ],   file(params.modules_testdata_base_path + 'genomics/sarscov2/genome/genome.fasta.fai', checkIfExists: true) ]
                input[3] = [ [], [] ]
                input[4] = [ [], [] ]
                input[5] = [ [], [] ]
                """
            }
        }

        then {
            assertAll(
                { assert process.success },
                { assert snapshot(
                    file(process.out.vcf[0][1]).name,
                    path(process.out.vcf[0][1]).linesGzip[2..10],
                    process.out.versions
                    ).match()
                }
            )
        }

    }

    test("sarscov2 - [ bam, bai, bed ] - fasta - fai") {

        when {
            process {
                """
                input[0] = [
                    [ id:'test', single_end:false ], // meta map
                    file(params.modules_testdata_base_path + 'genomics/sarscov2/illumina/bam/test.paired_end.sorted.bam', checkIfExists: true),
                    file(params.modules_testdata_base_path + 'genomics/sarscov2/illumina/bam/test.paired_end.sorted.bam.bai', checkIfExists: true),
                    [],
                    [],
                    file(params.modules_testdata_base_path + 'genomics/sarscov2/genome/bed/test.bed', checkIfExists: true),
                    ]
                input[1] = [ [ id: 'fasta' ], file(params.modules_testdata_base_path + 'genomics/sarscov2/genome/genome.fasta', checkIfExists: true) ]
                input[2] = [ [ id: 'fai' ],   file(params.modules_testdata_base_path + 'genomics/sarscov2/genome/genome.fasta.fai', checkIfExists: true) ]
                input[3] = [ [], [] ]
                input[4] = [ [], [] ]
                input[5] = [ [], [] ]
                """
            }
        }

        then {
            assertAll(
                { assert process.success },
                { assert snapshot(
                    file(process.out.vcf[0][1]).name,
                    path(process.out.vcf[0][1]).linesGzip[2..10],
                    process.out.versions
                    ).match()
                }
            )
        }

    }

    test("sarscov2 - [ cram, crai ] - fasta - fai") {

        when {
            process {
                """
                input[0] = [
                    [ id:'test', single_end:false ], // meta map
                    file(params.modules_testdata_base_path + 'genomics/homo_sapiens/illumina/cram/test.paired_end.sorted.cram', checkIfExists: true),
                    file(params.modules_testdata_base_path + 'genomics/homo_sapiens/illumina/cram/test.paired_end.sorted.cram.crai', checkIfExists: true),
                    [],
                    [],
                    [],
                    ]
                input[1] = [ [ id: 'fasta' ], file(params.modules_testdata_base_path + 'genomics/homo_sapiens/genome/genome.fasta', checkIfExists: true) ]
                input[2] = [ [ id: 'fai' ],   file(params.modules_testdata_base_path + 'genomics/homo_sapiens/genome/genome.fasta.fai', checkIfExists: true) ]
                input[3] = [ [], [] ]
                input[4] = [ [], [] ]
                input[5] = [ [], [] ]
                """
            }
        }

        then {
            assertAll(
                { assert process.success },
                { assert snapshot(
                    file(process.out.vcf[0][1]).name,
                    path(process.out.vcf[0][1]).linesGzip[2..10],
                    process.out.versions
                    ).match()
                }
            )
        }

    }

    test("sarscov2 - [ bam, bai, bam, bai ] - fasta - fai") {

        when {
            process {
                """
                input[0] = [
                    [ id:'test', single_end:false ], // meta map
                    file(params.modules_testdata_base_path + 'genomics/homo_sapiens/illumina/bam/test.paired_end.sorted.bam', checkIfExists: true),
                    file(params.modules_testdata_base_path + 'genomics/homo_sapiens/illumina/bam/test.paired_end.sorted.bam.bai', checkIfExists: true),
                    file(params.modules_testdata_base_path + 'genomics/homo_sapiens/illumina/bam/test2.paired_end.sorted.bam', checkIfExists: true),
                    file(params.modules_testdata_base_path + 'genomics/homo_sapiens/illumina/bam/test2.paired_end.sorted.bam.bai', checkIfExists: true),
                    [],
                    ]
                input[1] = [ [ id: 'fasta' ], file(params.modules_testdata_base_path + 'genomics/homo_sapiens/genome/genome.fasta', checkIfExists: true) ]
                input[2] = [ [ id: 'fai' ],   file(params.modules_testdata_base_path + 'genomics/homo_sapiens/genome/genome.fasta.fai', checkIfExists: true) ]
                input[3] = [ [], [] ]
                input[4] = [ [], [] ]
                input[5] = [ [], [] ]
                """
            }
        }

        then {
            assertAll(
                { assert process.success },
                { assert snapshot(
                    file(process.out.vcf[0][1]).name,
                    path(process.out.vcf[0][1]).linesGzip[2..10],
                    process.out.versions
                    ).match()
                }
            )
        }

    }

    test("sarscov2 - [ cram, crai, cram, crai, bed ] - fasta - fai") {

        when {
            process {
                """
                input[0] = [
                    [ id:'test', single_end:false ], // meta map
                    file(params.modules_testdata_base_path + 'genomics/homo_sapiens/illumina/cram/test.paired_end.sorted.cram', checkIfExists: true),
                    file(params.modules_testdata_base_path + 'genomics/homo_sapiens/illumina/cram/test.paired_end.sorted.cram.crai', checkIfExists: true),
                    file(params.modules_testdata_base_path + 'genomics/homo_sapiens/illumina/cram/test2.paired_end.sorted.cram', checkIfExists: true),
                    file(params.modules_testdata_base_path + 'genomics/homo_sapiens/illumina/cram/test2.paired_end.sorted.cram.crai', checkIfExists: true),
                    file(params.modules_testdata_base_path + 'genomics/homo_sapiens/genome/genome.bed', checkIfExists: true),
                    ]
                input[1] = [ [ id: 'fasta' ], file(params.modules_testdata_base_path + 'genomics/homo_sapiens/genome/genome.fasta', checkIfExists: true) ]
                input[2] = [ [ id: 'fai' ],   file(params.modules_testdata_base_path + 'genomics/homo_sapiens/genome/genome.fasta.fai', checkIfExists: true) ]
                input[3] = [ [], [] ]
                input[4] = [ [], [] ]
                input[5] = [ [], [] ]
                """
            }
        }

        then {
            assertAll(
                { assert process.success },
                { assert snapshot(
                    file(process.out.vcf[0][1]).name,
                    path(process.out.vcf[0][1]).linesGzip[2..10],
                    process.out.versions
                    ).match()
                }
            )
        }

    }
}
