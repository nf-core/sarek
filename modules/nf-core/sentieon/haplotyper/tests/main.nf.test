nextflow_process {

    name "Test Process SENTIEON_HAPLOTYPER"
    script "../main.nf"
    process "SENTIEON_HAPLOTYPER"
    config "./nextflow.config"

    tag "modules"
    tag "modules_nfcore"
    tag "sentieon"
    tag "sentieon/haplotyper"
    tag "sentieon/qualcal"

    test("Sentieon Haplotyper VCF") {

        when {
            process {
                """
                input[0] = [ [ id:'test' ], // meta map
                            file(params.modules_testdata_base_path + 'genomics/homo_sapiens/illumina/cram/test.paired_end.sorted.cram', checkIfExists: true),
                            file(params.modules_testdata_base_path + 'genomics/homo_sapiens/illumina/cram/test.paired_end.sorted.cram.crai', checkIfExists: true),
                            [],  // no intervals
                            []   // no recal table
                        ]
                input[1] = [[id: 'test'],file(params.modules_testdata_base_path + 'genomics/homo_sapiens/genome/genome.fasta', checkIfExists: true)]
                input[2] = [[id: 'test'],file(params.modules_testdata_base_path + 'genomics/homo_sapiens/genome/genome.fasta.fai', checkIfExists: true)]
                input[3] = [[:],[]]
                input[4] = [[:],[]]
                input[5] = 'variant'
                input[6] = false
                """
            }
        }

        then {
            assertAll(
                { assert process.success },
                { assert snapshot(
                        process.out.versions,
                        file(process.out.vcf_tbi.get(0).get(1)).name,
                        path(process.out.vcf[0][1]).vcf.variantsMD5
                    ).match()
                }
            )
        }

    }

    test("Sentieon Haplotyper GVCF") {

        when {
            process {
                """
                input[0] = [ [ id:'test' ], // meta map
                            file(params.modules_testdata_base_path + 'genomics/homo_sapiens/illumina/cram/test.paired_end.sorted.cram', checkIfExists: true),
                            file(params.modules_testdata_base_path + 'genomics/homo_sapiens/illumina/cram/test.paired_end.sorted.cram.crai', checkIfExists: true),
                            [],  // no intervals
                            []   // no recal table
                        ]
                input[1] = [[id: 'test'],file(params.modules_testdata_base_path + 'genomics/homo_sapiens/genome/genome.fasta', checkIfExists: true)]
                input[2] = [[id: 'test'],file(params.modules_testdata_base_path + 'genomics/homo_sapiens/genome/genome.fasta.fai', checkIfExists: true)]
                input[3] = [[:],[]]
                input[4] = [[:],[]]
                input[5] = ''
                input[6] = true
                """
            }
        }

        then {
            assertAll(
                { assert process.success },
                { assert snapshot(
                        process.out.versions,
                        file(process.out.gvcf_tbi.get(0).get(1)).name,
                        path(process.out.gvcf[0][1]).vcf.variantsMD5
                    ).match()
                }
            )
        }

    }

    test("Sentieon Haplotyper BOTH") {

        when {
            process {
                """
                input[0] = [ [ id:'test' ], // meta map
                            file(params.modules_testdata_base_path + 'genomics/homo_sapiens/illumina/cram/test.paired_end.sorted.cram', checkIfExists: true),
                            file(params.modules_testdata_base_path + 'genomics/homo_sapiens/illumina/cram/test.paired_end.sorted.cram.crai', checkIfExists: true),
                            [],  // no intervals
                            []   // no recal table
                        ]
                input[1] = [[id: 'test'],file(params.modules_testdata_base_path + 'genomics/homo_sapiens/genome/genome.fasta', checkIfExists: true)]
                input[2] = [[id: 'test'],file(params.modules_testdata_base_path + 'genomics/homo_sapiens/genome/genome.fasta.fai', checkIfExists: true)]
                input[3] = [[:],[]]
                input[4] = [[:],[]]
                input[5] = 'variant'
                input[6] = true
                """
            }
        }

        then {
            assertAll(
                { assert process.success },
                { assert snapshot(
                        process.out.versions,
                        file(process.out.gvcf_tbi.get(0).get(1)).name,
                        path(process.out.gvcf[0][1]).vcf.variantsMD5,
                        file(process.out.vcf_tbi.get(0).get(1)).name,
                        path(process.out.vcf[0][1]).vcf.variantsMD5
                    ).match()
                }
            )
        }

    }

    test("Sentieon Haplotyper Intervals BOTH") {

        when {
            process {
                """
                input[0] = [ [ id:'test' ], // meta map
                            file(params.modules_testdata_base_path + 'genomics/homo_sapiens/illumina/cram/test.paired_end.sorted.cram', checkIfExists: true),
                            file(params.modules_testdata_base_path + 'genomics/homo_sapiens/illumina/cram/test.paired_end.sorted.cram.crai', checkIfExists: true),
                            file(params.modules_testdata_base_path + 'genomics/homo_sapiens/genome/genome.bed', checkIfExists: true),
                            []
                        ]
                input[1] = [[id: 'test'],file(params.modules_testdata_base_path + 'genomics/homo_sapiens/genome/genome.fasta', checkIfExists: true)]
                input[2] = [[id: 'test'],file(params.modules_testdata_base_path + 'genomics/homo_sapiens/genome/genome.fasta.fai', checkIfExists: true)]
                input[3] = [[:],[]]
                input[4] = [[:],[]]
                input[5] = 'variant'
                input[6] = true
                """
            }
        }

        then {
            assertAll(
                { assert process.success },
                { assert snapshot(
                        process.out.versions,
                        file(process.out.gvcf_tbi.get(0).get(1)).name,
                        path(process.out.gvcf[0][1]).vcf.variantsMD5,
                        file(process.out.vcf_tbi.get(0).get(1)).name,
                        path(process.out.vcf[0][1]).vcf.variantsMD5
                    ).match()
                }
            )
        }

    }

    test("Sentieon Haplotyper DBSNP BOTH") {

        when {
            process {
                """
                input[0] = [ [ id:'test' ], // meta map
                            file(params.modules_testdata_base_path + 'genomics/homo_sapiens/illumina/cram/test.paired_end.sorted.cram', checkIfExists: true),
                            file(params.modules_testdata_base_path + 'genomics/homo_sapiens/illumina/cram/test.paired_end.sorted.cram.crai', checkIfExists: true),
                            file(params.modules_testdata_base_path + 'genomics/homo_sapiens/genome/genome.bed', checkIfExists: true),
                            []
                        ]
                input[1] = [[id: 'test'], file(params.modules_testdata_base_path + 'genomics/homo_sapiens/genome/genome.fasta', checkIfExists: true)]
                input[2] = [[id: 'test'], file(params.modules_testdata_base_path + 'genomics/homo_sapiens/genome/genome.fasta.fai', checkIfExists: true)]
                input[3] = [[id: 'test'], file(params.modules_testdata_base_path + 'genomics/homo_sapiens/genome/vcf/dbsnp_146.hg38.vcf.gz', checkIfExists: true)]
                input[4] = [[id: 'test'], file(params.modules_testdata_base_path + 'genomics/homo_sapiens/genome/vcf/dbsnp_146.hg38.vcf.gz.tbi', checkIfExists: true)]
                input[5] = 'variant'
                input[6] = true
                """
            }
        }

        then {
            assertAll(
                { assert process.success },
                { assert snapshot(
                        process.out.versions,
                        file(process.out.gvcf_tbi.get(0).get(1)).name,
                        path(process.out.gvcf[0][1]).vcf.variantsMD5,
                        file(process.out.vcf_tbi.get(0).get(1)).name,
                        path(process.out.vcf[0][1]).vcf.variantsMD5
                    ).match()
                }
            )
        }
    }

    test("Sentieon Haplotyper Recalibration") {

        setup {
            run("SENTIEON_QUALCAL") {
                script "../../qualcal/main.nf"
                process {
                    """
                    input[0] = [
                        [ id:'test' ], // meta map
                        file(params.modules_testdata_base_path + 'genomics/homo_sapiens/illumina/cram/test.paired_end.sorted.cram', checkIfExists: true),
                        file(params.modules_testdata_base_path + 'genomics/homo_sapiens/illumina/cram/test.paired_end.sorted.cram.crai', checkIfExists: true)
                    ]
                    input[1] = [ [ id:'fasta' ], file(params.modules_testdata_base_path + 'genomics/homo_sapiens/genome/genome.fasta', checkIfExists: true) ]
                    input[2] = [ [ id:'fasta' ], file(params.modules_testdata_base_path + 'genomics/homo_sapiens/genome/genome.fasta.fai', checkIfExists: true) ]

                    input[3] = [ [ id:'knownSites' ],file(params.modules_testdata_base_path + 'genomics/homo_sapiens/genome/vcf/dbsnp_146.hg38.vcf.gz', checkIfExists: true) ]
                    input[4] = [ [ id:'knownSites' ],file(params.modules_testdata_base_path + 'genomics/homo_sapiens/genome/vcf/dbsnp_146.hg38.vcf.gz.tbi', checkIfExists: true) ]
                    input[5] = [[:],[]]
                    input[6] = false
                    """
                }
            }
        }

        when {
            process {
                """
                recal_table = SENTIEON_QUALCAL.out.table
                bam = Channel.of([ [ id:'test' ], // meta map
                            file(params.modules_testdata_base_path + 'genomics/homo_sapiens/illumina/cram/test.paired_end.sorted.cram', checkIfExists: true),
                            file(params.modules_testdata_base_path + 'genomics/homo_sapiens/illumina/cram/test.paired_end.sorted.cram.crai', checkIfExists: true),
                            []  // no intervals

                        ])
                input[0] = bam.join(recal_table)
                input[1] = [[id: 'test'],file(params.modules_testdata_base_path + 'genomics/homo_sapiens/genome/genome.fasta', checkIfExists: true)]
                input[2] = [[id: 'test'],file(params.modules_testdata_base_path + 'genomics/homo_sapiens/genome/genome.fasta.fai', checkIfExists: true)]
                input[3] = [[:],[]]
                input[4] = [[:],[]]
                input[5] = 'variant'
                input[6] = false
                """
            }
        }

        then {
            assertAll(
                { assert process.success },
                { assert snapshot(
                        process.out.versions,
                        file(process.out.vcf_tbi.get(0).get(1)).name,
                        path(process.out.vcf[0][1]).vcf.variantsMD5
                    ).match()
                }
            )
        }

    }

    test("Sentieon Haplotyper multiple CRAMs") {

        when {
            process {
                """
                input[0] = [ 
                    [ id:'test' ], // meta map
                    [ 
                        file(params.modules_testdata_base_path + 'genomics/homo_sapiens/illumina/cram/test.paired_end.sorted.cram', checkIfExists: true),
                        file(params.modules_testdata_base_path + 'genomics/homo_sapiens/illumina/bam/test2.paired_end.sorted.bam', checkIfExists: true),
                    ],
                    [
                        file(params.modules_testdata_base_path + 'genomics/homo_sapiens/illumina/cram/test.paired_end.sorted.cram.crai', checkIfExists: true),
                        file(params.modules_testdata_base_path + 'genomics/homo_sapiens/illumina/bam/test2.paired_end.sorted.bam.bai', checkIfExists: true),
                    ],
                    [],  // no intervals
                    []   // no recal table
                ]
                input[1] = [[id: 'test'],file(params.modules_testdata_base_path + 'genomics/homo_sapiens/genome/genome.fasta', checkIfExists: true)]
                input[2] = [[id: 'test'],file(params.modules_testdata_base_path + 'genomics/homo_sapiens/genome/genome.fasta.fai', checkIfExists: true)]
                input[3] = [[:],[]]
                input[4] = [[:],[]]
                input[5] = 'variant'
                input[6] = false
                """
            }
        }

        then {
            assertAll(
                { assert process.success },
                { assert snapshot(
                        process.out.versions,
                        file(process.out.vcf_tbi.get(0).get(1)).name,
                        path(process.out.vcf[0][1]).vcf.variantsMD5
                    ).match()
                }
            )
        }

    }

    test("Sentieon Haplotyper - stub") {

        options "-stub"
        when {
            process {
                """
                input[0] = [ [ id:'test' ], // meta map
                            file(params.modules_testdata_base_path + 'genomics/homo_sapiens/illumina/cram/test.paired_end.sorted.cram', checkIfExists: true),
                            file(params.modules_testdata_base_path + 'genomics/homo_sapiens/illumina/cram/test.paired_end.sorted.cram.crai', checkIfExists: true),
                            [],  // no intervals
                            []   // no recal table
                        ]
                input[1] = [[id: 'test'],file(params.modules_testdata_base_path + 'genomics/homo_sapiens/genome/genome.fasta', checkIfExists: true)]
                input[2] = [[id: 'test'],file(params.modules_testdata_base_path + 'genomics/homo_sapiens/genome/genome.fasta.fai', checkIfExists: true)]
                input[3] = [[:],[]]
                input[4] = [[:],[]]
                input[5] = 'variant'
                input[6] = true
                """
            }
        }

        then {

            assertAll(
                { assert process.success },
                { assert snapshot(process.out).match() }
            )

        }
    }

}
